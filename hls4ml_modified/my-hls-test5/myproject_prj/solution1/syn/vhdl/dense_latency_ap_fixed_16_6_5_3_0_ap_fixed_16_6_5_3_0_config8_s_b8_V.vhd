-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_b8_V_rom is 
    generic(
             DWIDTH     : integer := 11; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_b8_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00000010110", 1 => "11101100110", 2 => "00001001100", 
    3 => "10110001001", 4 => "11100101111", 5 => "00101011001", 
    6 => "11101011010", 7 => "00100101001", 8 => "00011000010", 
    9 => "00000010011", 10 => "11001100100", 11 => "00101101100", 
    12 => "00000011110", 13 => "11011000111", 14 => "11110000010", 
    15 => "00000100011", 16 => "11110000000", 17 => "00001110100", 
    18 => "11000110111", 19 => "11111110000", 20 => "10100001000", 
    21 => "11011100001", 22 => "11111100001", 23 => "00000101100", 
    24 => "00000111011", 25 => "11101011111", 26 => "00100101010", 
    27 => "11110001111", 28 => "10111111000", 29 => "11000111100", 
    30 => "11001001000", 31 => "11110100010", 32 => "00011001011", 
    33 => "11110101101", 34 => "11100111010", 35 => "11010101110", 
    36 => "10101011010", 37 => "00011111011", 38 => "11110111010", 
    39 => "11011110001", 40 => "00000000100", 41 => "00011000001", 
    42 => "11011111011", 43 => "11100010010", 44 => "11011011111", 
    45 => "11101011001", 46 => "11100111111", 47 => "00001100001", 
    48 => "01000111111", 49 => "11010111011", 50 => "11101011001", 
    51 => "11011110100", 52 => "10000111101", 53 => "11110001010", 
    54 => "11101011100", 55 => "11111000000", 56 => "00100110111", 
    57 => "00001000010", 58 => "01000000101", 59 => "11111110011", 
    60 => "11111111110", 61 => "11101001000", 62 => "11101010100", 
    63 => "00011101000", 64 => "11011111011", 65 => "00011000000", 
    66 => "00001001100", 67 => "11100100011", 68 => "11111010010", 
    69 => "11101101000", 70 => "11101101001", 71 => "00010010010", 
    72 => "00001000010", 73 => "00100001000", 74 => "11110100011", 
    75 => "11101011101", 76 => "00110100000", 77 => "11101010010", 
    78 => "11011001100", 79 => "00010010100", 80 => "00010000000", 
    81 => "00001010110", 82 => "11100001011", 83 => "11000101101", 
    84 => "00110010101", 85 => "00000101001", 86 => "11101010100", 
    87 => "11001110111", 88 => "00001110111", 89 => "11111001111", 
    90 => "11100010111", 91 => "00010001111", 92 => "00001001101", 
    93 => "11111010000", 94 => "00001110010", 95 => "00101001110", 
    96 => "11111010000", 97 => "11101100101", 98 => "11110101110", 
    99 => "11100010011", 100 => "00110011001", 101 => "11101011111", 
    102 => "11101000001", 103 => "10101010010", 104 => "10100100101", 
    105 => "10110010011", 106 => "11001100001", 107 => "00100001000", 
    108 => "00001100010", 109 => "00101011001", 110 => "11000100001", 
    111 => "11010101101", 112 => "11111011001", 113 => "11110010001", 
    114 => "00000011011", 115 => "00000011000", 116 => "00010000000", 
    117 => "11101100101", 118 => "11111101001", 119 => "11101011101", 
    120 => "11111111010", 121 => "11010101000", 122 => "10110000110", 
    123 => "00001010110", 124 => "11010101101", 125 => "11110101000", 
    126 => "11110111010", 127 => "11110010011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_b8_V is
    generic (
        DataWidth : INTEGER := 11;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_b8_V is
    component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_b8_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_b8_V_rom_U :  component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_b8_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


