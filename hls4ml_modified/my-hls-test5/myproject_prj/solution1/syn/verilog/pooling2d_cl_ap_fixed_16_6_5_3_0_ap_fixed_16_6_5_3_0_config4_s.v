// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pooling2d_cl_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_0_V_address0,
        data_0_V_ce0,
        data_0_V_q0,
        data_1_V_address0,
        data_1_V_ce0,
        data_1_V_q0,
        data_2_V_address0,
        data_2_V_ce0,
        data_2_V_q0,
        data_3_V_address0,
        data_3_V_ce0,
        data_3_V_q0,
        data_4_V_address0,
        data_4_V_ce0,
        data_4_V_q0,
        data_5_V_address0,
        data_5_V_ce0,
        data_5_V_q0,
        data_6_V_address0,
        data_6_V_ce0,
        data_6_V_q0,
        data_7_V_address0,
        data_7_V_ce0,
        data_7_V_q0,
        res_0_V_address0,
        res_0_V_ce0,
        res_0_V_we0,
        res_0_V_d0,
        res_1_V_address0,
        res_1_V_ce0,
        res_1_V_we0,
        res_1_V_d0,
        res_2_V_address0,
        res_2_V_ce0,
        res_2_V_we0,
        res_2_V_d0,
        res_3_V_address0,
        res_3_V_ce0,
        res_3_V_we0,
        res_3_V_d0,
        res_4_V_address0,
        res_4_V_ce0,
        res_4_V_we0,
        res_4_V_d0,
        res_5_V_address0,
        res_5_V_ce0,
        res_5_V_we0,
        res_5_V_d0,
        res_6_V_address0,
        res_6_V_ce0,
        res_6_V_we0,
        res_6_V_d0,
        res_7_V_address0,
        res_7_V_ce0,
        res_7_V_we0,
        res_7_V_d0
);

parameter    ap_ST_fsm_state1 = 49'd1;
parameter    ap_ST_fsm_state2 = 49'd2;
parameter    ap_ST_fsm_state3 = 49'd4;
parameter    ap_ST_fsm_state4 = 49'd8;
parameter    ap_ST_fsm_state5 = 49'd16;
parameter    ap_ST_fsm_state6 = 49'd32;
parameter    ap_ST_fsm_state7 = 49'd64;
parameter    ap_ST_fsm_state8 = 49'd128;
parameter    ap_ST_fsm_state9 = 49'd256;
parameter    ap_ST_fsm_state10 = 49'd512;
parameter    ap_ST_fsm_state11 = 49'd1024;
parameter    ap_ST_fsm_state12 = 49'd2048;
parameter    ap_ST_fsm_state13 = 49'd4096;
parameter    ap_ST_fsm_state14 = 49'd8192;
parameter    ap_ST_fsm_state15 = 49'd16384;
parameter    ap_ST_fsm_state16 = 49'd32768;
parameter    ap_ST_fsm_state17 = 49'd65536;
parameter    ap_ST_fsm_state18 = 49'd131072;
parameter    ap_ST_fsm_state19 = 49'd262144;
parameter    ap_ST_fsm_state20 = 49'd524288;
parameter    ap_ST_fsm_state21 = 49'd1048576;
parameter    ap_ST_fsm_state22 = 49'd2097152;
parameter    ap_ST_fsm_state23 = 49'd4194304;
parameter    ap_ST_fsm_state24 = 49'd8388608;
parameter    ap_ST_fsm_state25 = 49'd16777216;
parameter    ap_ST_fsm_state26 = 49'd33554432;
parameter    ap_ST_fsm_state27 = 49'd67108864;
parameter    ap_ST_fsm_state28 = 49'd134217728;
parameter    ap_ST_fsm_state29 = 49'd268435456;
parameter    ap_ST_fsm_state30 = 49'd536870912;
parameter    ap_ST_fsm_state31 = 49'd1073741824;
parameter    ap_ST_fsm_state32 = 49'd2147483648;
parameter    ap_ST_fsm_state33 = 49'd4294967296;
parameter    ap_ST_fsm_state34 = 49'd8589934592;
parameter    ap_ST_fsm_state35 = 49'd17179869184;
parameter    ap_ST_fsm_state36 = 49'd34359738368;
parameter    ap_ST_fsm_state37 = 49'd68719476736;
parameter    ap_ST_fsm_state38 = 49'd137438953472;
parameter    ap_ST_fsm_state39 = 49'd274877906944;
parameter    ap_ST_fsm_state40 = 49'd549755813888;
parameter    ap_ST_fsm_state41 = 49'd1099511627776;
parameter    ap_ST_fsm_state42 = 49'd2199023255552;
parameter    ap_ST_fsm_state43 = 49'd4398046511104;
parameter    ap_ST_fsm_state44 = 49'd8796093022208;
parameter    ap_ST_fsm_state45 = 49'd17592186044416;
parameter    ap_ST_fsm_state46 = 49'd35184372088832;
parameter    ap_ST_fsm_state47 = 49'd70368744177664;
parameter    ap_ST_fsm_state48 = 49'd140737488355328;
parameter    ap_ST_fsm_state49 = 49'd281474976710656;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [11:0] data_0_V_address0;
output   data_0_V_ce0;
input  [14:0] data_0_V_q0;
output  [11:0] data_1_V_address0;
output   data_1_V_ce0;
input  [14:0] data_1_V_q0;
output  [11:0] data_2_V_address0;
output   data_2_V_ce0;
input  [14:0] data_2_V_q0;
output  [11:0] data_3_V_address0;
output   data_3_V_ce0;
input  [14:0] data_3_V_q0;
output  [11:0] data_4_V_address0;
output   data_4_V_ce0;
input  [14:0] data_4_V_q0;
output  [11:0] data_5_V_address0;
output   data_5_V_ce0;
input  [14:0] data_5_V_q0;
output  [11:0] data_6_V_address0;
output   data_6_V_ce0;
input  [14:0] data_6_V_q0;
output  [11:0] data_7_V_address0;
output   data_7_V_ce0;
input  [14:0] data_7_V_q0;
output  [9:0] res_0_V_address0;
output   res_0_V_ce0;
output   res_0_V_we0;
output  [15:0] res_0_V_d0;
output  [9:0] res_1_V_address0;
output   res_1_V_ce0;
output   res_1_V_we0;
output  [15:0] res_1_V_d0;
output  [9:0] res_2_V_address0;
output   res_2_V_ce0;
output   res_2_V_we0;
output  [15:0] res_2_V_d0;
output  [9:0] res_3_V_address0;
output   res_3_V_ce0;
output   res_3_V_we0;
output  [15:0] res_3_V_d0;
output  [9:0] res_4_V_address0;
output   res_4_V_ce0;
output   res_4_V_we0;
output  [15:0] res_4_V_d0;
output  [9:0] res_5_V_address0;
output   res_5_V_ce0;
output   res_5_V_we0;
output  [15:0] res_5_V_d0;
output  [9:0] res_6_V_address0;
output   res_6_V_ce0;
output   res_6_V_we0;
output  [15:0] res_6_V_d0;
output  [9:0] res_7_V_address0;
output   res_7_V_ce0;
output   res_7_V_we0;
output  [15:0] res_7_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_0_V_ce0;
reg data_1_V_ce0;
reg data_2_V_ce0;
reg data_3_V_ce0;
reg data_4_V_ce0;
reg data_5_V_ce0;
reg data_6_V_ce0;
reg data_7_V_ce0;
reg res_0_V_ce0;
reg res_0_V_we0;
reg res_1_V_ce0;
reg res_1_V_we0;
reg res_2_V_ce0;
reg res_2_V_we0;
reg res_3_V_ce0;
reg res_3_V_we0;
reg res_4_V_ce0;
reg res_4_V_we0;
reg res_5_V_ce0;
reg res_5_V_we0;
reg res_6_V_ce0;
reg res_6_V_we0;
reg res_7_V_ce0;
reg res_7_V_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [48:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
wire   [12:0] ff_cast1_fu_428_p1;
reg   [12:0] ff_cast1_reg_714;
wire    ap_CS_fsm_state2;
wire   [7:0] ff_1_fu_438_p2;
reg   [7:0] ff_1_reg_722;
wire   [1:0] kk_1_fu_460_p2;
reg   [1:0] kk_1_reg_733;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_16_fu_472_p2;
reg   [0:0] tmp_16_reg_738;
wire   [0:0] tmp_13_fu_454_p2;
wire   [1:0] tmp_32_fu_478_p2;
reg   [1:0] tmp_32_reg_742;
wire   [14:0] tmp_17_fu_484_p3;
reg   [14:0] tmp_17_reg_747;
wire   [1:0] ll_1_fu_498_p2;
reg   [1:0] ll_1_reg_755;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp_20_fu_509_p1;
reg   [63:0] tmp_20_reg_760;
wire   [0:0] tmp_18_fu_492_p2;
wire   [14:0] tmp_22_fu_530_p2;
reg   [14:0] tmp_22_reg_765;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_697_p2;
reg   [31:0] mul2_reg_776;
wire    ap_CS_fsm_state8;
reg   [4:0] tmp_35_reg_781;
wire    ap_CS_fsm_state9;
wire   [14:0] grp_fu_538_p2;
reg   [14:0] newIndex_reg_786;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
reg   [14:0] data_0_V_load_reg_831;
wire    ap_CS_fsm_state26;
reg   [14:0] data_1_V_load_reg_836;
reg   [14:0] data_2_V_load_reg_841;
reg   [14:0] data_3_V_load_reg_846;
reg   [14:0] data_4_V_load_reg_851;
reg   [14:0] data_5_V_load_reg_856;
reg   [14:0] data_6_V_load_reg_861;
reg   [14:0] data_7_V_load_reg_866;
wire   [12:0] tmp_14_fu_625_p2;
reg   [12:0] tmp_14_reg_871;
wire    ap_CS_fsm_state28;
wire   [15:0] pool_V_q0;
wire    ap_CS_fsm_state29;
wire   [0:0] exitcond_i_i_fu_630_p2;
wire   [2:0] i_fu_641_p2;
reg   [2:0] i_reg_890;
reg   [15:0] pool_V_load_reg_900;
wire    ap_CS_fsm_state30;
wire   [15:0] y_V_2_fu_660_p3;
wire    ap_CS_fsm_state31;
wire   [27:0] grp_fu_703_p2;
reg   [27:0] mul_reg_911;
wire    ap_CS_fsm_state33;
reg   [4:0] tmp_33_reg_916;
wire    ap_CS_fsm_state34;
wire  signed [12:0] arrayNo2_fu_676_p1;
reg  signed [12:0] arrayNo2_reg_921;
wire    ap_CS_fsm_state47;
reg   [9:0] res_0_V_addr_reg_925;
reg   [9:0] res_1_V_addr_reg_930;
reg   [9:0] res_2_V_addr_reg_935;
reg   [9:0] res_3_V_addr_reg_940;
reg   [9:0] res_4_V_addr_reg_945;
reg   [9:0] res_5_V_addr_reg_950;
reg   [9:0] res_6_V_addr_reg_955;
reg   [9:0] res_7_V_addr_reg_960;
wire   [6:0] ii_4_fu_691_p2;
wire    ap_CS_fsm_state49;
reg   [1:0] pool_V_address0;
reg    pool_V_ce0;
reg    pool_V_we0;
reg   [15:0] pool_V_d0;
reg   [7:0] ff_reg_353;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_s_fu_444_p2;
reg   [6:0] ii_reg_365;
wire   [0:0] exitcond_fu_432_p2;
reg   [1:0] kk_reg_377;
reg   [1:0] ll_reg_388;
wire    ap_CS_fsm_state27;
reg   [15:0] agg_result_V_i_i_reg_399;
reg   [2:0] i_i_i_reg_417;
wire   [63:0] newIndex5_fu_552_p1;
wire   [63:0] tmp_i_i_fu_636_p1;
wire   [63:0] newIndex4_fu_679_p1;
wire   [15:0] tmp_fu_594_p10;
wire    ap_CS_fsm_state48;
wire   [6:0] kk_cast_fu_450_p1;
wire   [6:0] tmp_15_fu_466_p2;
wire   [1:0] tmp_19_fu_504_p2;
wire   [0:0] tmp_34_fu_514_p1;
wire   [7:0] tmp_21_fu_518_p3;
wire   [14:0] tmp_34_cast_fu_526_p1;
wire   [12:0] grp_fu_538_p1;
wire  signed [14:0] arrayNo_fu_563_p1;
wire   [15:0] tmp_fu_594_p1;
wire   [15:0] tmp_fu_594_p2;
wire   [15:0] tmp_fu_594_p3;
wire   [15:0] tmp_fu_594_p4;
wire   [15:0] tmp_fu_594_p5;
wire   [15:0] tmp_fu_594_p6;
wire   [15:0] tmp_fu_594_p7;
wire   [15:0] tmp_fu_594_p8;
wire   [31:0] tmp_fu_594_p9;
wire   [12:0] tmp1_fu_617_p3;
wire   [10:0] grp_fu_650_p1;
wire   [0:0] tmp_i_i_46_fu_655_p2;
wire   [12:0] grp_fu_650_p2;
wire   [16:0] grp_fu_697_p0;
wire   [14:0] grp_fu_697_p1;
wire   [12:0] grp_fu_703_p0;
wire   [14:0] grp_fu_703_p1;
reg    grp_fu_538_ap_start;
wire    grp_fu_538_ap_done;
reg    grp_fu_650_ap_start;
wire    grp_fu_650_ap_done;
reg   [48:0] ap_NS_fsm;
wire   [31:0] grp_fu_697_p10;
wire   [27:0] grp_fu_703_p00;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 49'd1;
end

pooling2d_cl_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_pool_V #(
    .DataWidth( 16 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
pool_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pool_V_address0),
    .ce0(pool_V_ce0),
    .we0(pool_V_we0),
    .d0(pool_V_d0),
    .q0(pool_V_q0)
);

myproject_urem_15ns_13ns_15_19_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 19 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 15 ))
myproject_urem_15ns_13ns_15_19_seq_1_U568(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_538_ap_start),
    .done(grp_fu_538_ap_done),
    .din0(tmp_22_reg_765),
    .din1(grp_fu_538_p1),
    .ce(1'b1),
    .dout(grp_fu_538_p2)
);

myproject_mux_832_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 32 ),
    .dout_WIDTH( 16 ))
myproject_mux_832_16_1_1_U569(
    .din0(tmp_fu_594_p1),
    .din1(tmp_fu_594_p2),
    .din2(tmp_fu_594_p3),
    .din3(tmp_fu_594_p4),
    .din4(tmp_fu_594_p5),
    .din5(tmp_fu_594_p6),
    .din6(tmp_fu_594_p7),
    .din7(tmp_fu_594_p8),
    .din8(tmp_fu_594_p9),
    .dout(tmp_fu_594_p10)
);

myproject_urem_13ns_11ns_13_17_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 17 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 13 ))
myproject_urem_13ns_11ns_13_17_seq_1_U570(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_650_ap_start),
    .done(grp_fu_650_ap_done),
    .din0(tmp_14_reg_871),
    .din1(grp_fu_650_p1),
    .ce(1'b1),
    .dout(grp_fu_650_p2)
);

myproject_mul_mul_17ns_15ns_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 32 ))
myproject_mul_mul_17ns_15ns_32_3_1_U571(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_697_p0),
    .din1(grp_fu_697_p1),
    .ce(1'b1),
    .dout(grp_fu_697_p2)
);

myproject_mul_mul_13ns_15ns_28_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 28 ))
myproject_mul_mul_13ns_15ns_28_3_1_U572(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_703_p0),
    .din1(grp_fu_703_p1),
    .ce(1'b1),
    .dout(grp_fu_703_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond_fu_432_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        agg_result_V_i_i_reg_399 <= y_V_2_fu_660_p3;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        agg_result_V_i_i_reg_399 <= pool_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_444_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ff_reg_353 <= ff_1_reg_722;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ff_reg_353 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        i_i_i_reg_417 <= i_reg_890;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        i_i_i_reg_417 <= 3'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_432_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ii_reg_365 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        ii_reg_365 <= ii_4_fu_691_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_444_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        kk_reg_377 <= 2'd0;
    end else if (((tmp_18_fu_492_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        kk_reg_377 <= kk_1_reg_733;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_13_fu_454_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        ll_reg_388 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        ll_reg_388 <= ll_1_reg_755;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        arrayNo2_reg_921 <= arrayNo2_fu_676_p1;
        res_0_V_addr_reg_925 <= newIndex4_fu_679_p1;
        res_1_V_addr_reg_930 <= newIndex4_fu_679_p1;
        res_2_V_addr_reg_935 <= newIndex4_fu_679_p1;
        res_3_V_addr_reg_940 <= newIndex4_fu_679_p1;
        res_4_V_addr_reg_945 <= newIndex4_fu_679_p1;
        res_5_V_addr_reg_950 <= newIndex4_fu_679_p1;
        res_6_V_addr_reg_955 <= newIndex4_fu_679_p1;
        res_7_V_addr_reg_960 <= newIndex4_fu_679_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        data_0_V_load_reg_831 <= data_0_V_q0;
        data_1_V_load_reg_836 <= data_1_V_q0;
        data_2_V_load_reg_841 <= data_2_V_q0;
        data_3_V_load_reg_846 <= data_3_V_q0;
        data_4_V_load_reg_851 <= data_4_V_q0;
        data_5_V_load_reg_856 <= data_5_V_q0;
        data_6_V_load_reg_861 <= data_6_V_q0;
        data_7_V_load_reg_866 <= data_7_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ff_1_reg_722 <= ff_1_fu_438_p2;
        ff_cast1_reg_714[7 : 0] <= ff_cast1_fu_428_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_i_fu_630_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state29))) begin
        i_reg_890 <= i_fu_641_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        kk_1_reg_733 <= kk_1_fu_460_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ll_1_reg_755 <= ll_1_fu_498_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mul2_reg_776 <= grp_fu_697_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        mul_reg_911 <= grp_fu_703_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        newIndex_reg_786 <= grp_fu_538_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        pool_V_load_reg_900 <= pool_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_14_reg_871 <= tmp_14_fu_625_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_13_fu_454_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_16_reg_738 <= tmp_16_fu_472_p2;
        tmp_17_reg_747 <= tmp_17_fu_484_p3;
        tmp_32_reg_742[1] <= tmp_32_fu_478_p2[1];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_18_fu_492_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_20_reg_760[1 : 0] <= tmp_20_fu_509_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_18_fu_492_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (tmp_16_reg_738 == 1'd0))) begin
        tmp_22_reg_765 <= tmp_22_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        tmp_33_reg_916 <= {{mul_reg_911[27:23]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_35_reg_781 <= {{mul2_reg_776[31:27]}};
    end
end

always @ (*) begin
    if (((exitcond_fu_432_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_432_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        data_0_V_ce0 = 1'b1;
    end else begin
        data_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        data_1_V_ce0 = 1'b1;
    end else begin
        data_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        data_2_V_ce0 = 1'b1;
    end else begin
        data_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        data_3_V_ce0 = 1'b1;
    end else begin
        data_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        data_4_V_ce0 = 1'b1;
    end else begin
        data_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        data_5_V_ce0 = 1'b1;
    end else begin
        data_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        data_6_V_ce0 = 1'b1;
    end else begin
        data_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        data_7_V_ce0 = 1'b1;
    end else begin
        data_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_538_ap_start = 1'b1;
    end else begin
        grp_fu_538_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_i_fu_630_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        grp_fu_650_ap_start = 1'b1;
    end else begin
        grp_fu_650_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        pool_V_address0 = tmp_i_i_fu_636_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        pool_V_address0 = tmp_20_reg_760;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        pool_V_address0 = tmp_20_fu_509_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        pool_V_address0 = 64'd0;
    end else begin
        pool_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        pool_V_ce0 = 1'b1;
    end else begin
        pool_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        pool_V_d0 = tmp_fu_594_p10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        pool_V_d0 = 16'd32768;
    end else begin
        pool_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state27) & (tmp_16_reg_738 == 1'd0)) | ((tmp_18_fu_492_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (tmp_16_reg_738 == 1'd1)))) begin
        pool_V_we0 = 1'b1;
    end else begin
        pool_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        res_0_V_ce0 = 1'b1;
    end else begin
        res_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((arrayNo2_reg_921 == 13'd0) & (1'b1 == ap_CS_fsm_state48))) begin
        res_0_V_we0 = 1'b1;
    end else begin
        res_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        res_1_V_ce0 = 1'b1;
    end else begin
        res_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((arrayNo2_reg_921 == 13'd1) & (1'b1 == ap_CS_fsm_state48))) begin
        res_1_V_we0 = 1'b1;
    end else begin
        res_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        res_2_V_ce0 = 1'b1;
    end else begin
        res_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((arrayNo2_reg_921 == 13'd2) & (1'b1 == ap_CS_fsm_state48))) begin
        res_2_V_we0 = 1'b1;
    end else begin
        res_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        res_3_V_ce0 = 1'b1;
    end else begin
        res_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((arrayNo2_reg_921 == 13'd3) & (1'b1 == ap_CS_fsm_state48))) begin
        res_3_V_we0 = 1'b1;
    end else begin
        res_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        res_4_V_ce0 = 1'b1;
    end else begin
        res_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((arrayNo2_reg_921 == 13'd4) & (1'b1 == ap_CS_fsm_state48))) begin
        res_4_V_we0 = 1'b1;
    end else begin
        res_4_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        res_5_V_ce0 = 1'b1;
    end else begin
        res_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((arrayNo2_reg_921 == 13'd5) & (1'b1 == ap_CS_fsm_state48))) begin
        res_5_V_we0 = 1'b1;
    end else begin
        res_5_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        res_6_V_ce0 = 1'b1;
    end else begin
        res_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((arrayNo2_reg_921 == 13'd6) & (1'b1 == ap_CS_fsm_state48))) begin
        res_6_V_we0 = 1'b1;
    end else begin
        res_6_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        res_7_V_ce0 = 1'b1;
    end else begin
        res_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(arrayNo2_reg_921 == 13'd0) & ~(arrayNo2_reg_921 == 13'd1) & ~(arrayNo2_reg_921 == 13'd2) & ~(arrayNo2_reg_921 == 13'd3) & ~(arrayNo2_reg_921 == 13'd4) & ~(arrayNo2_reg_921 == 13'd5) & ~(arrayNo2_reg_921 == 13'd6) & (1'b1 == ap_CS_fsm_state48))) begin
        res_7_V_we0 = 1'b1;
    end else begin
        res_7_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_432_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_s_fu_444_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_13_fu_454_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((tmp_18_fu_492_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((tmp_18_fu_492_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (tmp_16_reg_738 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((exitcond_i_i_fu_630_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign arrayNo2_fu_676_p1 = $signed(tmp_33_reg_916);

assign arrayNo_fu_563_p1 = $signed(tmp_35_reg_781);

assign data_0_V_address0 = newIndex5_fu_552_p1;

assign data_1_V_address0 = newIndex5_fu_552_p1;

assign data_2_V_address0 = newIndex5_fu_552_p1;

assign data_3_V_address0 = newIndex5_fu_552_p1;

assign data_4_V_address0 = newIndex5_fu_552_p1;

assign data_5_V_address0 = newIndex5_fu_552_p1;

assign data_6_V_address0 = newIndex5_fu_552_p1;

assign data_7_V_address0 = newIndex5_fu_552_p1;

assign exitcond_fu_432_p2 = ((ff_reg_353 == 8'd128) ? 1'b1 : 1'b0);

assign exitcond_i_i_fu_630_p2 = ((i_i_i_reg_417 == 3'd4) ? 1'b1 : 1'b0);

assign ff_1_fu_438_p2 = (ff_reg_353 + 8'd1);

assign ff_cast1_fu_428_p1 = ff_reg_353;

assign grp_fu_538_p1 = 15'd2848;

assign grp_fu_650_p1 = 13'd704;

assign grp_fu_697_p0 = 32'd47128;

assign grp_fu_697_p1 = grp_fu_697_p10;

assign grp_fu_697_p10 = tmp_22_reg_765;

assign grp_fu_703_p0 = grp_fu_703_p00;

assign grp_fu_703_p00 = tmp_14_reg_871;

assign grp_fu_703_p1 = 28'd11916;

assign i_fu_641_p2 = (i_i_i_reg_417 + 3'd1);

assign ii_4_fu_691_p2 = (ii_reg_365 + 7'd2);

assign kk_1_fu_460_p2 = (kk_reg_377 + 2'd1);

assign kk_cast_fu_450_p1 = kk_reg_377;

assign ll_1_fu_498_p2 = (ll_reg_388 + 2'd1);

assign newIndex4_fu_679_p1 = grp_fu_650_p2;

assign newIndex5_fu_552_p1 = newIndex_reg_786;

assign res_0_V_address0 = res_0_V_addr_reg_925;

assign res_0_V_d0 = agg_result_V_i_i_reg_399;

assign res_1_V_address0 = res_1_V_addr_reg_930;

assign res_1_V_d0 = agg_result_V_i_i_reg_399;

assign res_2_V_address0 = res_2_V_addr_reg_935;

assign res_2_V_d0 = agg_result_V_i_i_reg_399;

assign res_3_V_address0 = res_3_V_addr_reg_940;

assign res_3_V_d0 = agg_result_V_i_i_reg_399;

assign res_4_V_address0 = res_4_V_addr_reg_945;

assign res_4_V_d0 = agg_result_V_i_i_reg_399;

assign res_5_V_address0 = res_5_V_addr_reg_950;

assign res_5_V_d0 = agg_result_V_i_i_reg_399;

assign res_6_V_address0 = res_6_V_addr_reg_955;

assign res_6_V_d0 = agg_result_V_i_i_reg_399;

assign res_7_V_address0 = res_7_V_addr_reg_960;

assign res_7_V_d0 = agg_result_V_i_i_reg_399;

assign tmp1_fu_617_p3 = {{ii_reg_365}, {6'd0}};

assign tmp_13_fu_454_p2 = ((kk_reg_377 == 2'd2) ? 1'b1 : 1'b0);

assign tmp_14_fu_625_p2 = (ff_cast1_reg_714 + tmp1_fu_617_p3);

assign tmp_15_fu_466_p2 = (ii_reg_365 + kk_cast_fu_450_p1);

assign tmp_16_fu_472_p2 = ((tmp_15_fu_466_p2 > 7'd87) ? 1'b1 : 1'b0);

assign tmp_17_fu_484_p3 = {{tmp_15_fu_466_p2}, {ff_reg_353}};

assign tmp_18_fu_492_p2 = ((ll_reg_388 == 2'd2) ? 1'b1 : 1'b0);

assign tmp_19_fu_504_p2 = (tmp_32_reg_742 + ll_reg_388);

assign tmp_20_fu_509_p1 = tmp_19_fu_504_p2;

assign tmp_21_fu_518_p3 = {{tmp_34_fu_514_p1}, {7'd0}};

assign tmp_22_fu_530_p2 = (tmp_34_cast_fu_526_p1 + tmp_17_reg_747);

assign tmp_32_fu_478_p2 = kk_reg_377 << 2'd1;

assign tmp_34_cast_fu_526_p1 = tmp_21_fu_518_p3;

assign tmp_34_fu_514_p1 = ll_reg_388[0:0];

assign tmp_fu_594_p1 = data_0_V_load_reg_831;

assign tmp_fu_594_p2 = data_1_V_load_reg_836;

assign tmp_fu_594_p3 = data_2_V_load_reg_841;

assign tmp_fu_594_p4 = data_3_V_load_reg_846;

assign tmp_fu_594_p5 = data_4_V_load_reg_851;

assign tmp_fu_594_p6 = data_5_V_load_reg_856;

assign tmp_fu_594_p7 = data_6_V_load_reg_861;

assign tmp_fu_594_p8 = data_7_V_load_reg_866;

assign tmp_fu_594_p9 = $unsigned(arrayNo_fu_563_p1);

assign tmp_i_i_46_fu_655_p2 = (($signed(pool_V_load_reg_900) > $signed(agg_result_V_i_i_reg_399)) ? 1'b1 : 1'b0);

assign tmp_i_i_fu_636_p1 = i_i_i_reg_417;

assign tmp_s_fu_444_p2 = ((ii_reg_365 < 7'd88) ? 1'b1 : 1'b0);

assign y_V_2_fu_660_p3 = ((tmp_i_i_46_fu_655_p2[0:0] === 1'b1) ? pool_V_load_reg_900 : agg_result_V_i_i_reg_399);

always @ (posedge ap_clk) begin
    ff_cast1_reg_714[12:8] <= 5'b00000;
    tmp_32_reg_742[0] <= 1'b0;
    tmp_20_reg_760[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
end

endmodule //pooling2d_cl_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s
