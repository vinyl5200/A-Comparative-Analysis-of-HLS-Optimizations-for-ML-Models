-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    data_0_V_ce0 : OUT STD_LOGIC;
    data_0_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    data_1_V_ce0 : OUT STD_LOGIC;
    data_1_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    data_2_V_ce0 : OUT STD_LOGIC;
    data_2_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    data_3_V_ce0 : OUT STD_LOGIC;
    data_3_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_4_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    data_4_V_ce0 : OUT STD_LOGIC;
    data_4_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_5_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    data_5_V_ce0 : OUT STD_LOGIC;
    data_5_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_6_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    data_6_V_ce0 : OUT STD_LOGIC;
    data_6_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_7_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    data_7_V_ce0 : OUT STD_LOGIC;
    data_7_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    res_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_0_V_ce0 : OUT STD_LOGIC;
    res_0_V_we0 : OUT STD_LOGIC;
    res_0_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_1_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_1_V_ce0 : OUT STD_LOGIC;
    res_1_V_we0 : OUT STD_LOGIC;
    res_1_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_2_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_2_V_ce0 : OUT STD_LOGIC;
    res_2_V_we0 : OUT STD_LOGIC;
    res_2_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_3_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_3_V_ce0 : OUT STD_LOGIC;
    res_3_V_we0 : OUT STD_LOGIC;
    res_3_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_4_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_4_V_ce0 : OUT STD_LOGIC;
    res_4_V_we0 : OUT STD_LOGIC;
    res_4_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_5_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_5_V_ce0 : OUT STD_LOGIC;
    res_5_V_we0 : OUT STD_LOGIC;
    res_5_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_6_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_6_V_ce0 : OUT STD_LOGIC;
    res_6_V_we0 : OUT STD_LOGIC;
    res_6_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_7_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_7_V_ce0 : OUT STD_LOGIC;
    res_7_V_we0 : OUT STD_LOGIC;
    res_7_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv27_2E8C : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010111010001100";
    constant ap_const_lv13_1600 : STD_LOGIC_VECTOR (12 downto 0) := "1011000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv13_2C0 : STD_LOGIC_VECTOR (12 downto 0) := "0001011000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal w6_V_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal w6_V_ce0 : STD_LOGIC;
    signal w6_V_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal b6_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal b6_V_ce0 : STD_LOGIC;
    signal b6_V_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal acc_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_489 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal next_mul_fu_501_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal next_mul_reg_752 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ii_7_fu_513_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ii_7_reg_760 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_466_reg_765 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_0_V_load_reg_810 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal data_1_V_load_reg_815 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_2_V_load_reg_820 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_3_V_load_reg_825 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_4_V_load_reg_830 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_5_V_load_reg_835 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_6_V_load_reg_840 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_7_V_load_reg_845 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_227_fu_558_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_227_reg_850 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal OP1_V_cast_fu_566_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal OP1_V_cast_reg_855 : STD_LOGIC_VECTOR (25 downto 0);
    signal jj_3_fu_580_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal jj_3_reg_863 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal index_fu_586_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal index_reg_868 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_230_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_urem_fu_603_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_233_fu_611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_233_reg_878 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal w6_V_load_reg_888 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_747_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Val2_s_reg_898 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal iacc_2_fu_634_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal iacc_2_reg_906 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_229_fu_640_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_229_reg_911 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b6_V_load_reg_921 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ii_8_fu_655_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ii_8_reg_929 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_232_fu_661_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_232_reg_934 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_228_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal jj_4_fu_679_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal jj_4_reg_942 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal index_2_fu_685_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal index_2_reg_947 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_237_fu_673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_V_addr_4_reg_952 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal mult_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_28_reg_962 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_62_fu_699_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_62_reg_967 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ires_2_fu_710_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ires_2_reg_975 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_231_fu_704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal arrayNo4_cast_reg_985 : STD_LOGIC_VECTOR (3 downto 0);
    signal res_0_V_addr_reg_989 : STD_LOGIC_VECTOR (3 downto 0);
    signal res_1_V_addr_reg_994 : STD_LOGIC_VECTOR (3 downto 0);
    signal res_2_V_addr_reg_999 : STD_LOGIC_VECTOR (3 downto 0);
    signal res_3_V_addr_reg_1004 : STD_LOGIC_VECTOR (3 downto 0);
    signal res_4_V_addr_reg_1009 : STD_LOGIC_VECTOR (3 downto 0);
    signal res_5_V_addr_reg_1014 : STD_LOGIC_VECTOR (3 downto 0);
    signal res_6_V_addr_reg_1019 : STD_LOGIC_VECTOR (3 downto 0);
    signal res_7_V_addr_reg_1024 : STD_LOGIC_VECTOR (3 downto 0);
    signal mult_V_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal mult_V_ce0 : STD_LOGIC;
    signal mult_V_we0 : STD_LOGIC;
    signal mult_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal acc_V_ce0 : STD_LOGIC;
    signal acc_V_we0 : STD_LOGIC;
    signal acc_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ii_reg_398 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal phi_mul_reg_410 : STD_LOGIC_VECTOR (26 downto 0);
    signal phi_urem_reg_421 : STD_LOGIC_VECTOR (12 downto 0);
    signal jj_reg_433 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal iacc_reg_444 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ii2_reg_455 : STD_LOGIC_VECTOR (12 downto 0);
    signal jj3_reg_466 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ires_reg_477 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal newIndex7_fu_529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_238_fu_690_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_239_fu_695_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_236_fu_716_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex8_fu_735_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal b6_V_load_cast_fu_645_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal cache_V_fu_544_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal cache_V_fu_544_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal jj_cast_fu_570_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal next_urem_fu_591_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_467_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal jj3_cast_fu_669_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_468_fu_731_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_747_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);

    component myproject_mux_832_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_mul_mul_16s_11s_26_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_w6_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (19 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_b6_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_mult_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (19 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_acc_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    w6_V_U : component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_w6_V
    generic map (
        DataWidth => 11,
        AddressRange => 720896,
        AddressWidth => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w6_V_address0,
        ce0 => w6_V_ce0,
        q0 => w6_V_q0);

    b6_V_U : component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_b6_V
    generic map (
        DataWidth => 10,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b6_V_address0,
        ce0 => b6_V_ce0,
        q0 => b6_V_q0);

    mult_V_U : component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_mult_V
    generic map (
        DataWidth => 16,
        AddressRange => 720896,
        AddressWidth => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mult_V_address0,
        ce0 => mult_V_ce0,
        we0 => mult_V_we0,
        d0 => mult_V_d0,
        q0 => mult_V_q0);

    acc_V_U : component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_acc_V
    generic map (
        DataWidth => 16,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_V_address0,
        ce0 => acc_V_ce0,
        we0 => acc_V_we0,
        d0 => acc_V_d0,
        q0 => acc_V_q0);

    myproject_mux_832_16_1_1_U594 : component myproject_mux_832_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 32,
        dout_WIDTH => 16)
    port map (
        din0 => data_0_V_load_reg_810,
        din1 => data_1_V_load_reg_815,
        din2 => data_2_V_load_reg_820,
        din3 => data_3_V_load_reg_825,
        din4 => data_4_V_load_reg_830,
        din5 => data_5_V_load_reg_835,
        din6 => data_6_V_load_reg_840,
        din7 => data_7_V_load_reg_845,
        din8 => cache_V_fu_544_p9,
        dout => cache_V_fu_544_p10);

    myproject_mul_mul_16s_11s_26_3_1_U595 : component myproject_mul_mul_16s_11s_26_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_747_p0,
        din1 => w6_V_load_reg_888,
        ce => ap_const_logic_1,
        dout => grp_fu_747_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((tmp_231_fu_704_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    iacc_reg_444_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_507_p2 = ap_const_lv1_1))) then 
                iacc_reg_444 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                iacc_reg_444 <= iacc_2_reg_906;
            end if; 
        end if;
    end process;

    ii2_reg_455_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_628_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                ii2_reg_455 <= ap_const_lv13_0;
            elsif (((tmp_237_fu_673_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                ii2_reg_455 <= ii_8_reg_929;
            end if; 
        end if;
    end process;

    ii_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ii_reg_398 <= ap_const_lv13_0;
            elsif (((tmp_230_fu_574_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                ii_reg_398 <= ii_7_reg_760;
            end if; 
        end if;
    end process;

    ires_reg_477_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_228_fu_649_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                ires_reg_477 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                ires_reg_477 <= ires_2_reg_975;
            end if; 
        end if;
    end process;

    jj3_reg_466_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                jj3_reg_466 <= jj_4_reg_942;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_228_fu_649_p2 = ap_const_lv1_0))) then 
                jj3_reg_466 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    jj_reg_433_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                jj_reg_433 <= jj_3_reg_863;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                jj_reg_433 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_410_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_410 <= ap_const_lv27_0;
            elsif (((tmp_230_fu_574_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_mul_reg_410 <= next_mul_reg_752;
            end if; 
        end if;
    end process;

    phi_urem_reg_421_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_urem_reg_421 <= ap_const_lv13_0;
            elsif (((tmp_230_fu_574_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_urem_reg_421 <= idx_urem_fu_603_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                OP1_V_cast_reg_855 <= OP1_V_cast_fu_566_p1;
                    tmp_227_reg_850(19 downto 7) <= tmp_227_fu_558_p3(19 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (tmp_237_fu_673_p2 = ap_const_lv1_0))) then
                acc_V_addr_4_reg_952 <= tmp_238_fu_690_p1(7 - 1 downto 0);
                index_2_reg_947 <= index_2_fu_685_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                arrayNo4_cast_reg_985 <= ires_reg_477(7 downto 4);
                res_0_V_addr_reg_989 <= newIndex8_fu_735_p1(4 - 1 downto 0);
                res_1_V_addr_reg_994 <= newIndex8_fu_735_p1(4 - 1 downto 0);
                res_2_V_addr_reg_999 <= newIndex8_fu_735_p1(4 - 1 downto 0);
                res_3_V_addr_reg_1004 <= newIndex8_fu_735_p1(4 - 1 downto 0);
                res_4_V_addr_reg_1009 <= newIndex8_fu_735_p1(4 - 1 downto 0);
                res_5_V_addr_reg_1014 <= newIndex8_fu_735_p1(4 - 1 downto 0);
                res_6_V_addr_reg_1019 <= newIndex8_fu_735_p1(4 - 1 downto 0);
                res_7_V_addr_reg_1024 <= newIndex8_fu_735_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                b6_V_load_reg_921 <= b6_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                data_0_V_load_reg_810 <= data_0_V_q0;
                data_1_V_load_reg_815 <= data_1_V_q0;
                data_2_V_load_reg_820 <= data_2_V_q0;
                data_3_V_load_reg_825 <= data_3_V_q0;
                data_4_V_load_reg_830 <= data_4_V_q0;
                data_5_V_load_reg_835 <= data_5_V_q0;
                data_6_V_load_reg_840 <= data_6_V_q0;
                data_7_V_load_reg_845 <= data_7_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                iacc_2_reg_906 <= iacc_2_fu_634_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ii_7_reg_760 <= ii_7_fu_513_p2;
                next_mul_reg_752 <= next_mul_fu_501_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                ii_8_reg_929 <= ii_8_fu_655_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_230_fu_574_p2 = ap_const_lv1_0))) then
                index_reg_868 <= index_fu_586_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                ires_2_reg_975 <= ires_2_fu_710_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                jj_3_reg_863 <= jj_3_fu_580_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                jj_4_reg_942 <= jj_4_fu_679_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                p_Val2_28_reg_962 <= mult_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                p_Val2_s_62_reg_967 <= p_Val2_s_62_fu_699_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                p_Val2_s_reg_898 <= grp_fu_747_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18))) then
                reg_489 <= acc_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_s_fu_628_p2 = ap_const_lv1_0))) then
                    tmp_229_reg_911(7 downto 0) <= tmp_229_fu_640_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_228_fu_649_p2 = ap_const_lv1_0))) then
                    tmp_232_reg_934(19 downto 7) <= tmp_232_fu_661_p3(19 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    tmp_233_reg_878(19 downto 0) <= tmp_233_fu_611_p1(19 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_507_p2 = ap_const_lv1_0))) then
                tmp_466_reg_765 <= phi_mul_reg_410(26 downto 23);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                w6_V_load_reg_888 <= w6_V_q0;
            end if;
        end if;
    end process;
    tmp_227_reg_850(6 downto 0) <= "0000000";
    tmp_233_reg_878(63 downto 20) <= "00000000000000000000000000000000000000000000";
    tmp_229_reg_911(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    tmp_232_reg_934(6 downto 0) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_507_p2, ap_CS_fsm_state5, tmp_230_fu_574_p2, ap_CS_fsm_state12, tmp_s_fu_628_p2, ap_CS_fsm_state15, tmp_228_fu_649_p2, ap_CS_fsm_state16, tmp_237_fu_673_p2, ap_CS_fsm_state21, tmp_231_fu_704_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_507_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((tmp_230_fu_574_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state12 => 
                if (((tmp_s_fu_628_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state15 => 
                if (((tmp_228_fu_649_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((tmp_237_fu_673_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state21 => 
                if (((tmp_231_fu_704_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
        OP1_V_cast_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(cache_V_fu_544_p10),26));


    acc_V_address0_assign_proc : process(tmp_229_reg_911, acc_V_addr_4_reg_952, ap_CS_fsm_state17, ap_CS_fsm_state21, ap_CS_fsm_state14, ap_CS_fsm_state20, tmp_236_fu_716_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            acc_V_address0 <= tmp_236_fu_716_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            acc_V_address0 <= acc_V_addr_4_reg_952;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            acc_V_address0 <= tmp_229_reg_911(7 - 1 downto 0);
        else 
            acc_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    acc_V_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state21, ap_CS_fsm_state14, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            acc_V_ce0 <= ap_const_logic_1;
        else 
            acc_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    acc_V_d0_assign_proc : process(p_Val2_s_62_reg_967, ap_CS_fsm_state14, ap_CS_fsm_state20, b6_V_load_cast_fu_645_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            acc_V_d0 <= p_Val2_s_62_reg_967;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            acc_V_d0 <= b6_V_load_cast_fu_645_p1;
        else 
            acc_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    acc_V_we0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            acc_V_we0 <= ap_const_logic_1;
        else 
            acc_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state21, tmp_231_fu_704_p2)
    begin
        if (((tmp_231_fu_704_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state21, tmp_231_fu_704_p2)
    begin
        if (((tmp_231_fu_704_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b6_V_address0 <= tmp_229_fu_640_p1(7 - 1 downto 0);

    b6_V_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            b6_V_ce0 <= ap_const_logic_1;
        else 
            b6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        b6_V_load_cast_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b6_V_load_reg_921),16));

    cache_V_fu_544_p9 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_466_reg_765),32));
    data_0_V_address0 <= newIndex7_fu_529_p1(10 - 1 downto 0);

    data_0_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_0_V_ce0 <= ap_const_logic_1;
        else 
            data_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_1_V_address0 <= newIndex7_fu_529_p1(10 - 1 downto 0);

    data_1_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_1_V_ce0 <= ap_const_logic_1;
        else 
            data_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_2_V_address0 <= newIndex7_fu_529_p1(10 - 1 downto 0);

    data_2_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_2_V_ce0 <= ap_const_logic_1;
        else 
            data_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_3_V_address0 <= newIndex7_fu_529_p1(10 - 1 downto 0);

    data_3_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_3_V_ce0 <= ap_const_logic_1;
        else 
            data_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_4_V_address0 <= newIndex7_fu_529_p1(10 - 1 downto 0);

    data_4_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_4_V_ce0 <= ap_const_logic_1;
        else 
            data_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_5_V_address0 <= newIndex7_fu_529_p1(10 - 1 downto 0);

    data_5_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_5_V_ce0 <= ap_const_logic_1;
        else 
            data_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_6_V_address0 <= newIndex7_fu_529_p1(10 - 1 downto 0);

    data_6_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_6_V_ce0 <= ap_const_logic_1;
        else 
            data_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_7_V_address0 <= newIndex7_fu_529_p1(10 - 1 downto 0);

    data_7_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_7_V_ce0 <= ap_const_logic_1;
        else 
            data_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_747_p0 <= OP1_V_cast_reg_855(16 - 1 downto 0);
    iacc_2_fu_634_p2 <= std_logic_vector(unsigned(iacc_reg_444) + unsigned(ap_const_lv8_1));
    idx_urem_fu_603_p3 <= 
        next_urem_fu_591_p2 when (tmp_467_fu_597_p2(0) = '1') else 
        ap_const_lv13_0;
    ii_7_fu_513_p2 <= std_logic_vector(unsigned(ii_reg_398) + unsigned(ap_const_lv13_1));
    ii_8_fu_655_p2 <= std_logic_vector(unsigned(ii2_reg_455) + unsigned(ap_const_lv13_1));
    index_2_fu_685_p2 <= std_logic_vector(unsigned(tmp_232_reg_934) + unsigned(jj3_cast_fu_669_p1));
    index_fu_586_p2 <= std_logic_vector(unsigned(tmp_227_reg_850) + unsigned(jj_cast_fu_570_p1));
    ires_2_fu_710_p2 <= std_logic_vector(unsigned(ires_reg_477) + unsigned(ap_const_lv8_1));
    jj3_cast_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jj3_reg_466),20));
    jj_3_fu_580_p2 <= std_logic_vector(unsigned(jj_reg_433) + unsigned(ap_const_lv8_1));
    jj_4_fu_679_p2 <= std_logic_vector(unsigned(jj3_reg_466) + unsigned(ap_const_lv8_1));
    jj_cast_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jj_reg_433),20));

    mult_V_address0_assign_proc : process(tmp_233_reg_878, ap_CS_fsm_state17, ap_CS_fsm_state11, tmp_239_fu_695_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            mult_V_address0 <= tmp_239_fu_695_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            mult_V_address0 <= tmp_233_reg_878(20 - 1 downto 0);
        else 
            mult_V_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mult_V_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            mult_V_ce0 <= ap_const_logic_1;
        else 
            mult_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mult_V_d0 <= p_Val2_s_reg_898(25 downto 10);

    mult_V_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            mult_V_we0 <= ap_const_logic_1;
        else 
            mult_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    newIndex7_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_urem_reg_421),64));
    newIndex8_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_468_fu_731_p1),64));
    next_mul_fu_501_p2 <= std_logic_vector(unsigned(phi_mul_reg_410) + unsigned(ap_const_lv27_2E8C));
    next_urem_fu_591_p2 <= std_logic_vector(unsigned(phi_urem_reg_421) + unsigned(ap_const_lv13_1));
    p_Val2_s_62_fu_699_p2 <= std_logic_vector(unsigned(reg_489) + unsigned(p_Val2_28_reg_962));
    res_0_V_address0 <= res_0_V_addr_reg_989;

    res_0_V_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            res_0_V_ce0 <= ap_const_logic_1;
        else 
            res_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_0_V_d0 <= reg_489;

    res_0_V_we0_assign_proc : process(arrayNo4_cast_reg_985, ap_CS_fsm_state23)
    begin
        if (((arrayNo4_cast_reg_985 = ap_const_lv4_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            res_0_V_we0 <= ap_const_logic_1;
        else 
            res_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_1_V_address0 <= res_1_V_addr_reg_994;

    res_1_V_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            res_1_V_ce0 <= ap_const_logic_1;
        else 
            res_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_1_V_d0 <= reg_489;

    res_1_V_we0_assign_proc : process(arrayNo4_cast_reg_985, ap_CS_fsm_state23)
    begin
        if (((arrayNo4_cast_reg_985 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            res_1_V_we0 <= ap_const_logic_1;
        else 
            res_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_2_V_address0 <= res_2_V_addr_reg_999;

    res_2_V_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            res_2_V_ce0 <= ap_const_logic_1;
        else 
            res_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_2_V_d0 <= reg_489;

    res_2_V_we0_assign_proc : process(arrayNo4_cast_reg_985, ap_CS_fsm_state23)
    begin
        if (((arrayNo4_cast_reg_985 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            res_2_V_we0 <= ap_const_logic_1;
        else 
            res_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_3_V_address0 <= res_3_V_addr_reg_1004;

    res_3_V_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            res_3_V_ce0 <= ap_const_logic_1;
        else 
            res_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_3_V_d0 <= reg_489;

    res_3_V_we0_assign_proc : process(arrayNo4_cast_reg_985, ap_CS_fsm_state23)
    begin
        if (((arrayNo4_cast_reg_985 = ap_const_lv4_3) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            res_3_V_we0 <= ap_const_logic_1;
        else 
            res_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_4_V_address0 <= res_4_V_addr_reg_1009;

    res_4_V_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            res_4_V_ce0 <= ap_const_logic_1;
        else 
            res_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_4_V_d0 <= reg_489;

    res_4_V_we0_assign_proc : process(arrayNo4_cast_reg_985, ap_CS_fsm_state23)
    begin
        if (((arrayNo4_cast_reg_985 = ap_const_lv4_4) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            res_4_V_we0 <= ap_const_logic_1;
        else 
            res_4_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_5_V_address0 <= res_5_V_addr_reg_1014;

    res_5_V_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            res_5_V_ce0 <= ap_const_logic_1;
        else 
            res_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_5_V_d0 <= reg_489;

    res_5_V_we0_assign_proc : process(arrayNo4_cast_reg_985, ap_CS_fsm_state23)
    begin
        if (((arrayNo4_cast_reg_985 = ap_const_lv4_5) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            res_5_V_we0 <= ap_const_logic_1;
        else 
            res_5_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_6_V_address0 <= res_6_V_addr_reg_1019;

    res_6_V_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            res_6_V_ce0 <= ap_const_logic_1;
        else 
            res_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_6_V_d0 <= reg_489;

    res_6_V_we0_assign_proc : process(arrayNo4_cast_reg_985, ap_CS_fsm_state23)
    begin
        if (((arrayNo4_cast_reg_985 = ap_const_lv4_6) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            res_6_V_we0 <= ap_const_logic_1;
        else 
            res_6_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_7_V_address0 <= res_7_V_addr_reg_1024;

    res_7_V_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            res_7_V_ce0 <= ap_const_logic_1;
        else 
            res_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_7_V_d0 <= reg_489;

    res_7_V_we0_assign_proc : process(arrayNo4_cast_reg_985, ap_CS_fsm_state23)
    begin
        if ((not((arrayNo4_cast_reg_985 = ap_const_lv4_0)) and not((arrayNo4_cast_reg_985 = ap_const_lv4_1)) and not((arrayNo4_cast_reg_985 = ap_const_lv4_2)) and not((arrayNo4_cast_reg_985 = ap_const_lv4_3)) and not((arrayNo4_cast_reg_985 = ap_const_lv4_4)) and not((arrayNo4_cast_reg_985 = ap_const_lv4_5)) and not((arrayNo4_cast_reg_985 = ap_const_lv4_6)) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            res_7_V_we0 <= ap_const_logic_1;
        else 
            res_7_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_227_fu_558_p3 <= (ii_reg_398 & ap_const_lv7_0);
    tmp_228_fu_649_p2 <= "1" when (ii2_reg_455 = ap_const_lv13_1600) else "0";
    tmp_229_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iacc_reg_444),64));
    tmp_230_fu_574_p2 <= "1" when (jj_reg_433 = ap_const_lv8_80) else "0";
    tmp_231_fu_704_p2 <= "1" when (ires_reg_477 = ap_const_lv8_80) else "0";
    tmp_232_fu_661_p3 <= (ii2_reg_455 & ap_const_lv7_0);
    tmp_233_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_reg_868),64));
    tmp_236_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ires_reg_477),64));
    tmp_237_fu_673_p2 <= "1" when (jj3_reg_466 = ap_const_lv8_80) else "0";
    tmp_238_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jj3_reg_466),64));
    tmp_239_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_2_reg_947),64));
    tmp_467_fu_597_p2 <= "1" when (unsigned(next_urem_fu_591_p2) < unsigned(ap_const_lv13_2C0)) else "0";
    tmp_468_fu_731_p1 <= ires_reg_477(4 - 1 downto 0);
    tmp_fu_507_p2 <= "1" when (ii_reg_398 = ap_const_lv13_1600) else "0";
    tmp_s_fu_628_p2 <= "1" when (iacc_reg_444 = ap_const_lv8_80) else "0";
    w6_V_address0 <= tmp_233_fu_611_p1(20 - 1 downto 0);

    w6_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            w6_V_ce0 <= ap_const_logic_1;
        else 
            w6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
