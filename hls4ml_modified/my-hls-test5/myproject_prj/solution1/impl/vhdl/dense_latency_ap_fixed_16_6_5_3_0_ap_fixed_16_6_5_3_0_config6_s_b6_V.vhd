-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_b6_V_rom is 
    generic(
             DWIDTH     : integer := 10; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_b6_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111001", 1 => "1110100100", 2 => "0001000010", 3 => "1111111001", 
    4 => "1111110010", 5 => "1111110100", 6 to 8=> "1111111001", 9 => "1111110111", 
    10 => "1111111011", 11 => "1111111001", 12 => "0000000001", 13 => "1000001101", 
    14 => "1101000100", 15 => "1111101111", 16 => "1111111001", 17 => "1111111010", 
    18 => "0010011100", 19 => "1111111000", 20 => "1111110110", 21 => "1111101101", 
    22 to 23=> "1111111001", 24 => "1111101100", 25 => "1111111001", 26 => "0000111110", 
    27 => "1111111001", 28 => "0000001111", 29 => "1110001001", 30 => "1111110001", 
    31 => "1111111001", 32 => "1000110010", 33 => "1111111001", 34 => "1101011010", 
    35 => "1111110111", 36 => "0001000110", 37 => "0000010100", 38 => "1111111000", 
    39 => "1111111001", 40 => "1111100110", 41 => "1001000111", 42 to 43=> "1111111001", 
    44 => "1111101010", 45 => "1111111010", 46 => "1111100110", 47 => "1111010100", 
    48 => "1111111001", 49 => "0001101101", 50 => "1000000011", 51 to 52=> "1111111001", 
    53 => "1111101011", 54 => "1101101110", 55 => "0011000101", 56 => "1111101111", 
    57 => "1111111000", 58 => "1111011100", 59 => "1111111010", 60 => "1111110010", 
    61 to 63=> "1111111001", 64 => "1011100011", 65 => "1111111010", 66 => "0001011100", 
    67 => "1111100101", 68 => "1111111011", 69 => "1111100011", 70 => "1111111001", 
    71 => "0001101110", 72 => "1111111001", 73 => "1101010111", 74 => "1111111000", 
    75 => "1111111010", 76 => "1111110101", 77 => "1111011000", 78 => "1111101000", 
    79 => "1111111001", 80 => "0000001110", 81 to 83=> "1111111001", 84 => "0000000111", 
    85 => "1111111001", 86 => "1111000010", 87 => "1111111001", 88 => "1111111011", 
    89 to 91=> "1111111001", 92 => "0001010101", 93 to 94=> "1111111001", 95 => "1111011001", 
    96 => "1111011100", 97 => "1111101100", 98 => "1110111001", 99 => "1101010011", 
    100 => "1111111001", 101 => "0110110010", 102 => "1111111001", 103 => "1011010111", 
    104 => "1111111001", 105 => "0001111101", 106 => "1111111100", 107 => "0011000111", 
    108 => "1111111010", 109 => "1111111101", 110 => "1111111011", 111 => "0000010001", 
    112 => "1111111010", 113 => "1111011101", 114 => "1111111001", 115 => "1111111011", 
    116 => "1111111001", 117 => "1111110010", 118 => "1110000010", 119 to 120=> "1111111001", 
    121 => "1110101111", 122 => "1111111010", 123 => "1111111011", 124 => "1111110111", 
    125 => "1110001010", 126 => "1111100110", 127 => "1111111001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_b6_V is
    generic (
        DataWidth : INTEGER := 10;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_b6_V is
    component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_b6_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_b6_V_rom_U :  component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_b6_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


