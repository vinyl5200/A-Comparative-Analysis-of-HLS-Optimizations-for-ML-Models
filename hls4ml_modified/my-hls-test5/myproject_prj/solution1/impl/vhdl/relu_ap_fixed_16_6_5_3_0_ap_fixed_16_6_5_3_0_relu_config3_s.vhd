-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    data_0_V_ce0 : OUT STD_LOGIC;
    data_0_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    data_1_V_ce0 : OUT STD_LOGIC;
    data_1_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    data_2_V_ce0 : OUT STD_LOGIC;
    data_2_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    data_3_V_ce0 : OUT STD_LOGIC;
    data_3_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_4_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    data_4_V_ce0 : OUT STD_LOGIC;
    data_4_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_5_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    data_5_V_ce0 : OUT STD_LOGIC;
    data_5_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_6_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    data_6_V_ce0 : OUT STD_LOGIC;
    data_6_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_7_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    data_7_V_ce0 : OUT STD_LOGIC;
    data_7_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    res_0_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    res_0_V_ce0 : OUT STD_LOGIC;
    res_0_V_we0 : OUT STD_LOGIC;
    res_0_V_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    res_1_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    res_1_V_ce0 : OUT STD_LOGIC;
    res_1_V_we0 : OUT STD_LOGIC;
    res_1_V_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    res_2_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    res_2_V_ce0 : OUT STD_LOGIC;
    res_2_V_we0 : OUT STD_LOGIC;
    res_2_V_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    res_3_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    res_3_V_ce0 : OUT STD_LOGIC;
    res_3_V_we0 : OUT STD_LOGIC;
    res_3_V_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    res_4_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    res_4_V_ce0 : OUT STD_LOGIC;
    res_4_V_we0 : OUT STD_LOGIC;
    res_4_V_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    res_5_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    res_5_V_ce0 : OUT STD_LOGIC;
    res_5_V_we0 : OUT STD_LOGIC;
    res_5_V_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    res_6_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    res_6_V_ce0 : OUT STD_LOGIC;
    res_6_V_we0 : OUT STD_LOGIC;
    res_6_V_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    res_7_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    res_7_V_ce0 : OUT STD_LOGIC;
    res_7_V_we0 : OUT STD_LOGIC;
    res_7_V_d0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
end;


architecture behav of relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv15_5900 : STD_LOGIC_VECTOR (14 downto 0) := "101100100000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv31_B818 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001011100000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_B20 : STD_LOGIC_VECTOR (14 downto 0) := "000101100100000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ii_3_fu_322_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ii_3_reg_418 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_328_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal next_mul_reg_423 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_reg_428 : STD_LOGIC_VECTOR (3 downto 0);
    signal newIndex1_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex1_reg_433 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_0_V_load_reg_485 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal data_1_V_load_reg_490 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_2_V_load_reg_495 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_3_V_load_reg_500 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_4_V_load_reg_505 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_5_V_load_reg_510 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_6_V_load_reg_515 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_7_V_load_reg_520 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_fu_373_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_30_reg_525 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_s_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_530 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_urem_fu_397_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal next_urem_reg_535 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal idx_urem_fu_408_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ii_reg_282 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal phi_mul_reg_293 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_urem_reg_304 : STD_LOGIC_VECTOR (14 downto 0);
    signal datareg_V_3_fu_383_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal datareg_V_fu_359_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal datareg_V_fu_359_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_31_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component myproject_mux_832_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    myproject_mux_832_16_1_1_U550 : component myproject_mux_832_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 32,
        dout_WIDTH => 16)
    port map (
        din0 => data_0_V_load_reg_485,
        din1 => data_1_V_load_reg_490,
        din2 => data_2_V_load_reg_495,
        din3 => data_3_V_load_reg_500,
        din4 => data_4_V_load_reg_505,
        din5 => data_5_V_load_reg_510,
        din6 => data_6_V_load_reg_515,
        din7 => data_7_V_load_reg_520,
        din8 => datareg_V_fu_359_p9,
        dout => datareg_V_fu_359_p10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_316_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ii_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                ii_reg_282 <= ii_3_reg_418;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ii_reg_282 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                phi_mul_reg_293 <= next_mul_reg_423;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_293 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    phi_urem_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                phi_urem_reg_304 <= idx_urem_fu_408_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_urem_reg_304 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                data_0_V_load_reg_485 <= data_0_V_q0;
                data_1_V_load_reg_490 <= data_1_V_q0;
                data_2_V_load_reg_495 <= data_2_V_q0;
                data_3_V_load_reg_500 <= data_3_V_q0;
                data_4_V_load_reg_505 <= data_4_V_q0;
                data_5_V_load_reg_510 <= data_5_V_q0;
                data_6_V_load_reg_515 <= data_6_V_q0;
                data_7_V_load_reg_520 <= data_7_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ii_3_reg_418 <= ii_3_fu_322_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_316_p2 = ap_const_lv1_0))) then
                    newIndex1_reg_433(14 downto 0) <= newIndex1_fu_344_p1(14 downto 0);
                next_mul_reg_423 <= next_mul_fu_328_p2;
                tmp_29_reg_428 <= phi_mul_reg_293(30 downto 27);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                next_urem_reg_535 <= next_urem_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_30_reg_525 <= tmp_30_fu_373_p1;
                tmp_s_reg_530 <= tmp_s_fu_377_p2;
            end if;
        end if;
    end process;
    newIndex1_reg_433(63 downto 15) <= "0000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_316_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_316_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, tmp_fu_316_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_316_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_316_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_316_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data_0_V_address0 <= newIndex1_fu_344_p1(12 - 1 downto 0);

    data_0_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_0_V_ce0 <= ap_const_logic_1;
        else 
            data_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_1_V_address0 <= newIndex1_fu_344_p1(12 - 1 downto 0);

    data_1_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_1_V_ce0 <= ap_const_logic_1;
        else 
            data_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_2_V_address0 <= newIndex1_fu_344_p1(12 - 1 downto 0);

    data_2_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_2_V_ce0 <= ap_const_logic_1;
        else 
            data_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_3_V_address0 <= newIndex1_fu_344_p1(12 - 1 downto 0);

    data_3_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_3_V_ce0 <= ap_const_logic_1;
        else 
            data_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_4_V_address0 <= newIndex1_fu_344_p1(12 - 1 downto 0);

    data_4_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_4_V_ce0 <= ap_const_logic_1;
        else 
            data_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_5_V_address0 <= newIndex1_fu_344_p1(12 - 1 downto 0);

    data_5_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_5_V_ce0 <= ap_const_logic_1;
        else 
            data_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_6_V_address0 <= newIndex1_fu_344_p1(12 - 1 downto 0);

    data_6_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_6_V_ce0 <= ap_const_logic_1;
        else 
            data_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_7_V_address0 <= newIndex1_fu_344_p1(12 - 1 downto 0);

    data_7_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_7_V_ce0 <= ap_const_logic_1;
        else 
            data_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    datareg_V_3_fu_383_p3 <= 
        tmp_30_reg_525 when (tmp_s_reg_530(0) = '1') else 
        ap_const_lv15_0;
    datareg_V_fu_359_p9 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_reg_428),32));
    idx_urem_fu_408_p3 <= 
        next_urem_reg_535 when (tmp_31_fu_403_p2(0) = '1') else 
        ap_const_lv15_0;
    ii_3_fu_322_p2 <= std_logic_vector(unsigned(ii_reg_282) + unsigned(ap_const_lv15_1));
    newIndex1_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_urem_reg_304),64));
    next_mul_fu_328_p2 <= std_logic_vector(unsigned(ap_const_lv31_B818) + unsigned(phi_mul_reg_293));
    next_urem_fu_397_p2 <= std_logic_vector(unsigned(phi_urem_reg_304) + unsigned(ap_const_lv15_1));
    res_0_V_address0 <= newIndex1_reg_433(12 - 1 downto 0);

    res_0_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            res_0_V_ce0 <= ap_const_logic_1;
        else 
            res_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_0_V_d0 <= datareg_V_3_fu_383_p3;

    res_0_V_we0_assign_proc : process(tmp_29_reg_428, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_29_reg_428 = ap_const_lv4_0))) then 
            res_0_V_we0 <= ap_const_logic_1;
        else 
            res_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_1_V_address0 <= newIndex1_reg_433(12 - 1 downto 0);

    res_1_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            res_1_V_ce0 <= ap_const_logic_1;
        else 
            res_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_1_V_d0 <= datareg_V_3_fu_383_p3;

    res_1_V_we0_assign_proc : process(tmp_29_reg_428, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_29_reg_428 = ap_const_lv4_1))) then 
            res_1_V_we0 <= ap_const_logic_1;
        else 
            res_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_2_V_address0 <= newIndex1_reg_433(12 - 1 downto 0);

    res_2_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            res_2_V_ce0 <= ap_const_logic_1;
        else 
            res_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_2_V_d0 <= datareg_V_3_fu_383_p3;

    res_2_V_we0_assign_proc : process(tmp_29_reg_428, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_29_reg_428 = ap_const_lv4_2))) then 
            res_2_V_we0 <= ap_const_logic_1;
        else 
            res_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_3_V_address0 <= newIndex1_reg_433(12 - 1 downto 0);

    res_3_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            res_3_V_ce0 <= ap_const_logic_1;
        else 
            res_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_3_V_d0 <= datareg_V_3_fu_383_p3;

    res_3_V_we0_assign_proc : process(tmp_29_reg_428, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_29_reg_428 = ap_const_lv4_3))) then 
            res_3_V_we0 <= ap_const_logic_1;
        else 
            res_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_4_V_address0 <= newIndex1_reg_433(12 - 1 downto 0);

    res_4_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            res_4_V_ce0 <= ap_const_logic_1;
        else 
            res_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_4_V_d0 <= datareg_V_3_fu_383_p3;

    res_4_V_we0_assign_proc : process(tmp_29_reg_428, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_29_reg_428 = ap_const_lv4_4))) then 
            res_4_V_we0 <= ap_const_logic_1;
        else 
            res_4_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_5_V_address0 <= newIndex1_reg_433(12 - 1 downto 0);

    res_5_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            res_5_V_ce0 <= ap_const_logic_1;
        else 
            res_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_5_V_d0 <= datareg_V_3_fu_383_p3;

    res_5_V_we0_assign_proc : process(tmp_29_reg_428, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_29_reg_428 = ap_const_lv4_5))) then 
            res_5_V_we0 <= ap_const_logic_1;
        else 
            res_5_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_6_V_address0 <= newIndex1_reg_433(12 - 1 downto 0);

    res_6_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            res_6_V_ce0 <= ap_const_logic_1;
        else 
            res_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_6_V_d0 <= datareg_V_3_fu_383_p3;

    res_6_V_we0_assign_proc : process(tmp_29_reg_428, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_29_reg_428 = ap_const_lv4_6))) then 
            res_6_V_we0 <= ap_const_logic_1;
        else 
            res_6_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_7_V_address0 <= newIndex1_reg_433(12 - 1 downto 0);

    res_7_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            res_7_V_ce0 <= ap_const_logic_1;
        else 
            res_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_7_V_d0 <= datareg_V_3_fu_383_p3;

    res_7_V_we0_assign_proc : process(tmp_29_reg_428, ap_CS_fsm_state5)
    begin
        if ((not((tmp_29_reg_428 = ap_const_lv4_0)) and not((tmp_29_reg_428 = ap_const_lv4_1)) and not((tmp_29_reg_428 = ap_const_lv4_2)) and not((tmp_29_reg_428 = ap_const_lv4_3)) and not((tmp_29_reg_428 = ap_const_lv4_4)) and not((tmp_29_reg_428 = ap_const_lv4_5)) and not((tmp_29_reg_428 = ap_const_lv4_6)) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            res_7_V_we0 <= ap_const_logic_1;
        else 
            res_7_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_30_fu_373_p1 <= datareg_V_fu_359_p10(15 - 1 downto 0);
    tmp_31_fu_403_p2 <= "1" when (unsigned(next_urem_reg_535) < unsigned(ap_const_lv15_B20)) else "0";
    tmp_fu_316_p2 <= "1" when (ii_reg_282 = ap_const_lv15_5900) else "0";
    tmp_s_fu_377_p2 <= "1" when (signed(datareg_V_fu_359_p10) > signed(ap_const_lv16_0)) else "0";
end behav;
