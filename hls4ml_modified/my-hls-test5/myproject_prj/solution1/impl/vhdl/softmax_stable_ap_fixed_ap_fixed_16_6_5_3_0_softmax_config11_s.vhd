-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config11_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_V_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    data_0_V_ce0 : OUT STD_LOGIC;
    data_0_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_0_V_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    data_0_V_ce1 : OUT STD_LOGIC;
    data_0_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_V_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    data_1_V_ce0 : OUT STD_LOGIC;
    data_1_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_V_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    data_1_V_ce1 : OUT STD_LOGIC;
    data_1_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_V_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    data_2_V_ce0 : OUT STD_LOGIC;
    data_2_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_V_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    data_2_V_ce1 : OUT STD_LOGIC;
    data_2_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    res_0_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_0_V_ap_vld : OUT STD_LOGIC;
    res_1_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_1_V_ap_vld : OUT STD_LOGIC;
    res_2_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_2_V_ap_vld : OUT STD_LOGIC;
    res_3_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_3_V_ap_vld : OUT STD_LOGIC;
    res_4_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_4_V_ap_vld : OUT STD_LOGIC;
    res_5_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_5_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config11_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv18_1FFFF : STD_LOGIC_VECTOR (17 downto 0) := "011111111111111111";
    constant ap_const_lv18_20000 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal exp_table1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce0 : STD_LOGIC;
    signal exp_table1_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal invert_table2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table2_ce0 : STD_LOGIC;
    signal invert_table2_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal reg_444 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal reg_450 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal reg_456 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_i_i1_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i1_reg_1017 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_i_i_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_reg_1022 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i2_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i2_reg_1027 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_i_i_i_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_reg_1047 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_519_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_3_reg_1052 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_3_fu_529_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_1060 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_1_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_1065 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal this_assign_s_fu_635_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal this_assign_s_reg_1088 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_1_fu_649_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1096 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_5_fu_655_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_1101 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_V_reg_1121 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal exp_table1_load_reg_1131 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal p_Val2_6_fu_682_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_6_reg_1136 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal newsignbit_1_reg_1141 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_11_fu_696_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_11_reg_1156 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal p_Val2_9_fu_710_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_9_reg_1162 : STD_LOGIC_VECTOR (17 downto 0);
    signal newsignbit_2_reg_1167 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_18_fu_810_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_18_reg_1182 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal p_Val2_16_fu_826_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_16_reg_1188 : STD_LOGIC_VECTOR (17 downto 0);
    signal newsignbit_4_reg_1193 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_2_fu_859_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_2_reg_1198 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal newsignbit_5_fu_872_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_5_reg_1204 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_892_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_reg_1210 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_13_fu_902_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_13_reg_1215 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal OP2_V_cast_fu_943_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal OP2_V_cast_reg_1225 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal i_2_fu_953_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_1233 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_4_fu_947_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_res_V_q1 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_load_6_reg_1243 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_982_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Val2_5_reg_1253 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal d_xi_xmax_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_xi_xmax_V_ce0 : STD_LOGIC;
    signal d_xi_xmax_V_we0 : STD_LOGIC;
    signal d_xi_xmax_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal exp_res_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal exp_res_V_ce0 : STD_LOGIC;
    signal exp_res_V_we0 : STD_LOGIC;
    signal exp_res_V_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal exp_res_V_ce1 : STD_LOGIC;
    signal i_reg_399 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal p_Val2_1_reg_410 : STD_LOGIC_VECTOR (15 downto 0);
    signal i4_reg_421 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal i5_reg_432 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal agg_result_i_i_fu_480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal agg_result_i_i1_fu_484_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal agg_result_i_i2_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex9_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_670_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_938_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_959_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal agg_result_i_i_i_fu_498_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i1_i_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_max_V_fu_511_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_549_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_560_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_2_fu_564_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal newsignbit_fu_581_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_fu_569_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_not_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_24_fu_577_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal underflow_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_3_mux_fu_619_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_3_fu_627_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_3_40_fu_674_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_4_fu_678_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_7_fu_702_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_8_fu_706_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_10_fu_724_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_i_i_i1_fu_730_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_i_i_i_41_fu_733_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_12_fu_737_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_13_fu_751_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal newsignbit_3_fu_756_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_1_fu_743_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_254_i_i_i_fu_764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_not_i_i_i_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_i_i_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_22_mux_i_i_i_fu_794_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_i_i_i_fu_802_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_15_fu_822_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_14_fu_818_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_17_fu_840_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_i_i3_fu_846_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_i_i_42_fu_849_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_19_fu_853_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_20_fu_867_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_254_i_i_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_2_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_not_i_i_fu_914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i2_i_fu_910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i1_fu_919_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_924_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_fu_931_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_982_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_982_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal arrayNo_cast_fu_539_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_982_p10 : STD_LOGIC_VECTOR (25 downto 0);

    component myproject_mul_mul_18s_17ns_26_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config11_s_exp_table1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config11_s_invert_table2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config10_s_acc_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config11_s_exp_res_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (16 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;



begin
    exp_table1_U : component softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config11_s_exp_table1
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table1_address0,
        ce0 => exp_table1_ce0,
        q0 => exp_table1_q0);

    invert_table2_U : component softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config11_s_invert_table2
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table2_address0,
        ce0 => invert_table2_ce0,
        q0 => invert_table2_q0);

    d_xi_xmax_V_U : component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config10_s_acc_V
    generic map (
        DataWidth => 16,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => d_xi_xmax_V_address0,
        ce0 => d_xi_xmax_V_ce0,
        we0 => d_xi_xmax_V_we0,
        d0 => this_assign_s_reg_1088,
        q0 => d_xi_xmax_V_q0);

    exp_res_V_U : component softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config11_s_exp_res_V
    generic map (
        DataWidth => 17,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_res_V_address0,
        ce0 => exp_res_V_ce0,
        we0 => exp_res_V_we0,
        d0 => exp_table1_load_reg_1131,
        q0 => exp_res_V_q0,
        address1 => exp_res_V_address1,
        ce1 => exp_res_V_ce1,
        q1 => exp_res_V_q1);

    myproject_mul_mul_18s_17ns_26_3_1_U690 : component myproject_mul_mul_18s_17ns_26_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_982_p0,
        din1 => grp_fu_982_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_982_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i4_reg_421_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_fu_523_p2 = ap_const_lv1_1))) then 
                i4_reg_421 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i4_reg_421 <= i_1_reg_1096;
            end if; 
        end if;
    end process;

    i5_reg_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                i5_reg_432 <= i_2_reg_1233;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                i5_reg_432 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_reg_399_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_reg_399 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_reg_399 <= i_3_reg_1060;
            end if; 
        end if;
    end process;

    p_Val2_1_reg_410_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                p_Val2_1_reg_410 <= data_2_V_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                p_Val2_1_reg_410 <= data_1_V_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_Val2_1_reg_410 <= data_0_V_q1;
            end if; 
        end if;
    end process;

    reg_444_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_444 <= data_0_V_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                reg_444 <= data_0_V_q0;
            end if; 
        end if;
    end process;

    reg_450_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                reg_450 <= data_1_V_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                reg_450 <= data_1_V_q0;
            end if; 
        end if;
    end process;

    reg_456_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                reg_456 <= data_2_V_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                reg_456 <= data_2_V_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                OP2_V_cast_reg_1225 <= OP2_V_cast_fu_943_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                exp_res_V_load_6_reg_1243 <= exp_res_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                exp_table1_load_reg_1131 <= exp_table1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                i_1_reg_1096 <= i_1_fu_649_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                i_2_reg_1233 <= i_2_fu_953_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_3_reg_1060 <= i_3_fu_529_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                isneg_2_reg_1198 <= p_Val2_19_fu_853_p2(18 downto 18);
                newsignbit_5_reg_1204 <= p_Val2_20_fu_867_p2(17 downto 17);
                tmp_13_reg_1215 <= tmp_13_fu_902_p3;
                tmp_9_reg_1210 <= p_Val2_20_fu_867_p2(17 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                newsignbit_1_reg_1141 <= p_Val2_6_fu_682_p2(17 downto 17);
                p_Val2_6_reg_1136 <= p_Val2_6_fu_682_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                newsignbit_2_reg_1167 <= p_Val2_9_fu_710_p2(17 downto 17);
                p_Val2_11_reg_1156 <= p_Val2_11_fu_696_p3;
                p_Val2_9_reg_1162 <= p_Val2_9_fu_710_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                newsignbit_4_reg_1193 <= p_Val2_16_fu_826_p2(17 downto 17);
                p_Val2_16_reg_1188 <= p_Val2_16_fu_826_p2;
                p_Val2_18_reg_1182 <= p_Val2_18_fu_810_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                p_Val2_5_reg_1253 <= grp_fu_982_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                this_assign_s_reg_1088 <= this_assign_s_fu_635_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_fu_523_p2 = ap_const_lv1_0))) then
                    tmp_1_reg_1065(2 downto 0) <= tmp_1_fu_535_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_3_reg_1052 <= tmp_3_fu_519_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_8_fu_643_p2 = ap_const_lv1_0))) then
                    tmp_5_reg_1101(2 downto 0) <= tmp_5_fu_655_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_i_i1_reg_1017 <= tmp_i_i1_fu_462_p2;
                tmp_i_i2_reg_1027 <= tmp_i_i2_fu_474_p2;
                tmp_i_i_reg_1022 <= tmp_i_i_fu_468_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_i_i_i_reg_1047 <= tmp_i_i_i_fu_492_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                y_V_reg_1121 <= d_xi_xmax_V_q0(15 downto 6);
            end if;
        end if;
    end process;
    tmp_1_reg_1065(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    tmp_5_reg_1101(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state6, tmp_fu_523_p2, ap_CS_fsm_state12, tmp_8_fu_643_p2, ap_CS_fsm_state23, tmp_4_fu_947_p2, arrayNo_cast_fu_539_p4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_fu_523_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif ((not((arrayNo_cast_fu_539_p4 = ap_const_lv2_0)) and not((arrayNo_cast_fu_539_p4 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_fu_523_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif (((arrayNo_cast_fu_539_p4 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_fu_523_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state12 => 
                if (((tmp_8_fu_643_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((tmp_4_fu_947_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
        OP2_V_cast_fu_943_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(invert_table2_q0),26));

    agg_result_i_i1_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i_reg_1022),64));
    agg_result_i_i2_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i2_reg_1027),64));
    agg_result_i_i_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i1_reg_1017),64));
    agg_result_i_i_i_fu_498_p3 <= 
        reg_450 when (tmp_i_i_i_reg_1047(0) = '1') else 
        reg_444;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state23, tmp_4_fu_947_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_4_fu_947_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state23, tmp_4_fu_947_p2)
    begin
        if (((tmp_4_fu_947_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    arrayNo_cast_fu_539_p4 <= i_reg_399(2 downto 1);
    brmerge_fu_613_p2 <= (p_Result_not_fu_607_p2 or newsignbit_fu_581_p3);
    brmerge_i_i1_fu_919_p2 <= (p_Result_not_i_i_fu_914_p2 or newsignbit_5_reg_1204);
    brmerge_i_i_fu_601_p2 <= (newsignbit_fu_581_p3 xor isneg_fu_569_p3);
    brmerge_i_i_i2_i_fu_910_p2 <= (newsignbit_5_reg_1204 xor isneg_2_reg_1198);
    brmerge_i_i_i_fu_788_p2 <= (p_Result_not_i_i_i_fu_782_p2 or newsignbit_3_fu_756_p3);
    brmerge_i_i_i_i_i_fu_776_p2 <= (newsignbit_3_fu_756_p3 xor isneg_1_fu_743_p3);

    d_xi_xmax_V_address0_assign_proc : process(tmp_1_reg_1065, ap_CS_fsm_state12, tmp_5_fu_655_p1, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            d_xi_xmax_V_address0 <= tmp_5_fu_655_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            d_xi_xmax_V_address0 <= tmp_1_reg_1065(3 - 1 downto 0);
        else 
            d_xi_xmax_V_address0 <= "XXX";
        end if; 
    end process;


    d_xi_xmax_V_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            d_xi_xmax_V_ce0 <= ap_const_logic_1;
        else 
            d_xi_xmax_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    d_xi_xmax_V_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            d_xi_xmax_V_we0 <= ap_const_logic_1;
        else 
            d_xi_xmax_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_0_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, agg_result_i_i_fu_480_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_0_V_address0 <= agg_result_i_i_fu_480_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            data_0_V_address0 <= ap_const_lv64_0(1 - 1 downto 0);
        else 
            data_0_V_address0 <= "X";
        end if; 
    end process;


    data_0_V_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state6, newIndex9_fu_553_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_0_V_address1 <= newIndex9_fu_553_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            data_0_V_address1 <= ap_const_lv64_1(1 - 1 downto 0);
        else 
            data_0_V_address1 <= "X";
        end if; 
    end process;


    data_0_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            data_0_V_ce0 <= ap_const_logic_1;
        else 
            data_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_0_V_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            data_0_V_ce1 <= ap_const_logic_1;
        else 
            data_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    data_1_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, agg_result_i_i1_fu_484_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_1_V_address0 <= agg_result_i_i1_fu_484_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            data_1_V_address0 <= ap_const_lv64_0(1 - 1 downto 0);
        else 
            data_1_V_address0 <= "X";
        end if; 
    end process;


    data_1_V_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state6, newIndex9_fu_553_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_1_V_address1 <= newIndex9_fu_553_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            data_1_V_address1 <= ap_const_lv64_1(1 - 1 downto 0);
        else 
            data_1_V_address1 <= "X";
        end if; 
    end process;


    data_1_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            data_1_V_ce0 <= ap_const_logic_1;
        else 
            data_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_1_V_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            data_1_V_ce1 <= ap_const_logic_1;
        else 
            data_1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    data_2_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, agg_result_i_i2_fu_488_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_2_V_address0 <= agg_result_i_i2_fu_488_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            data_2_V_address0 <= ap_const_lv64_0(1 - 1 downto 0);
        else 
            data_2_V_address0 <= "X";
        end if; 
    end process;


    data_2_V_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state6, newIndex9_fu_553_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_2_V_address1 <= newIndex9_fu_553_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            data_2_V_address1 <= ap_const_lv64_1(1 - 1 downto 0);
        else 
            data_2_V_address1 <= "X";
        end if; 
    end process;


    data_2_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            data_2_V_ce0 <= ap_const_logic_1;
        else 
            data_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_2_V_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            data_2_V_ce1 <= ap_const_logic_1;
        else 
            data_2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_res_V_address0_assign_proc : process(ap_CS_fsm_state12, tmp_5_reg_1101, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            exp_res_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            exp_res_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            exp_res_V_address0 <= tmp_5_reg_1101(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            exp_res_V_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            exp_res_V_address0 <= "XXX";
        end if; 
    end process;


    exp_res_V_address1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state23, tmp_10_fu_959_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            exp_res_V_address1 <= tmp_10_fu_959_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            exp_res_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            exp_res_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            exp_res_V_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            exp_res_V_address1 <= "XXX";
        end if; 
    end process;


    exp_res_V_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            exp_res_V_ce0 <= ap_const_logic_1;
        else 
            exp_res_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_res_V_ce1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            exp_res_V_ce1 <= ap_const_logic_1;
        else 
            exp_res_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_res_V_we0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            exp_res_V_we0 <= ap_const_logic_1;
        else 
            exp_res_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_table1_address0 <= tmp_7_fu_670_p1(10 - 1 downto 0);

    exp_table1_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            exp_table1_ce0 <= ap_const_logic_1;
        else 
            exp_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_982_p0 <= OP2_V_cast_reg_1225(18 - 1 downto 0);
    grp_fu_982_p1 <= grp_fu_982_p10(17 - 1 downto 0);
    grp_fu_982_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_load_6_reg_1243),26));
    i_1_fu_649_p2 <= std_logic_vector(unsigned(i4_reg_421) + unsigned(ap_const_lv3_1));
    i_2_fu_953_p2 <= std_logic_vector(unsigned(i5_reg_432) + unsigned(ap_const_lv3_1));
    i_3_fu_529_p2 <= std_logic_vector(unsigned(i_reg_399) + unsigned(ap_const_lv3_1));
    invert_table2_address0 <= tmp_6_fu_938_p1(10 - 1 downto 0);

    invert_table2_ce0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            invert_table2_ce0 <= ap_const_logic_1;
        else 
            invert_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    isneg_1_fu_743_p3 <= p_Val2_12_fu_737_p2(18 downto 18);
    isneg_2_fu_859_p3 <= p_Val2_19_fu_853_p2(18 downto 18);
    isneg_fu_569_p3 <= p_Val2_2_fu_564_p2(16 downto 16);
    newIndex9_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_549_p1),64));
    newsignbit_3_fu_756_p3 <= p_Val2_13_fu_751_p2(17 downto 17);
    newsignbit_5_fu_872_p3 <= p_Val2_20_fu_867_p2(17 downto 17);
    newsignbit_fu_581_p3 <= p_Val2_2_fu_564_p2(15 downto 15);
    p_Result_not_fu_607_p2 <= (isneg_fu_569_p3 xor ap_const_lv1_1);
    p_Result_not_i_i_fu_914_p2 <= (isneg_2_reg_1198 xor ap_const_lv1_1);
    p_Result_not_i_i_i_fu_782_p2 <= (isneg_1_fu_743_p3 xor ap_const_lv1_1);
    p_Val2_10_fu_724_p3 <= 
        ap_const_lv18_1FFFF when (newsignbit_2_reg_1167(0) = '1') else 
        p_Val2_9_reg_1162;
    p_Val2_11_fu_696_p3 <= 
        ap_const_lv18_1FFFF when (newsignbit_1_reg_1141(0) = '1') else 
        p_Val2_6_reg_1136;
    p_Val2_12_fu_737_p2 <= std_logic_vector(signed(tmp_i_i_i1_fu_730_p1) + signed(tmp_i_i_i_41_fu_733_p1));
    p_Val2_13_fu_751_p2 <= std_logic_vector(signed(p_Val2_10_fu_724_p3) + signed(p_Val2_11_reg_1156));
    p_Val2_14_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_q1),18));
    p_Val2_15_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_q0),18));
    p_Val2_16_fu_826_p2 <= std_logic_vector(unsigned(p_Val2_15_fu_822_p1) + unsigned(p_Val2_14_fu_818_p1));
    p_Val2_17_fu_840_p3 <= 
        ap_const_lv18_1FFFF when (newsignbit_4_reg_1193(0) = '1') else 
        p_Val2_16_reg_1188;
    p_Val2_18_fu_810_p3 <= 
        p_Val2_22_mux_i_i_i_fu_794_p3 when (brmerge_i_i_i_fu_788_p2(0) = '1') else 
        p_Val2_i_i_i_fu_802_p3;
    p_Val2_19_fu_853_p2 <= std_logic_vector(signed(tmp_i_i3_fu_846_p1) + signed(tmp_i_i_42_fu_849_p1));
    p_Val2_20_fu_867_p2 <= std_logic_vector(signed(p_Val2_17_fu_840_p3) + signed(p_Val2_18_reg_1182));
    p_Val2_22_mux_i_i_i_fu_794_p3 <= 
        ap_const_lv18_1FFFF when (brmerge_i_i_i_i_i_fu_776_p2(0) = '1') else 
        p_Val2_13_fu_751_p2;
    p_Val2_24_fu_577_p1 <= p_Val2_2_fu_564_p2(16 - 1 downto 0);
    p_Val2_2_fu_564_p2 <= std_logic_vector(signed(tmp_2_fu_560_p1) - signed(tmp_3_reg_1052));
    p_Val2_3_40_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_q0),18));
    p_Val2_3_fu_627_p3 <= 
        ap_const_lv16_8000 when (underflow_fu_595_p2(0) = '1') else 
        p_Val2_24_fu_577_p1;
    p_Val2_3_mux_fu_619_p3 <= 
        ap_const_lv16_7FFF when (brmerge_i_i_fu_601_p2(0) = '1') else 
        p_Val2_24_fu_577_p1;
    p_Val2_4_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_q1),18));
    p_Val2_6_fu_682_p2 <= std_logic_vector(unsigned(p_Val2_3_40_fu_674_p1) + unsigned(p_Val2_4_fu_678_p1));
    p_Val2_7_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_q1),18));
    p_Val2_8_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_q0),18));
    p_Val2_9_fu_710_p2 <= std_logic_vector(unsigned(p_Val2_7_fu_702_p1) + unsigned(p_Val2_8_fu_706_p1));
    p_Val2_i_i_i_fu_802_p3 <= 
        ap_const_lv18_20000 when (underflow_1_fu_770_p2(0) = '1') else 
        p_Val2_13_fu_751_p2;
    res_0_V <= p_Val2_5_reg_1253(25 downto 10);

    res_0_V_ap_vld_assign_proc : process(i5_reg_432, ap_CS_fsm_state28)
    begin
        if (((i5_reg_432 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            res_0_V_ap_vld <= ap_const_logic_1;
        else 
            res_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_1_V <= p_Val2_5_reg_1253(25 downto 10);

    res_1_V_ap_vld_assign_proc : process(i5_reg_432, ap_CS_fsm_state28)
    begin
        if (((i5_reg_432 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            res_1_V_ap_vld <= ap_const_logic_1;
        else 
            res_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_2_V <= p_Val2_5_reg_1253(25 downto 10);

    res_2_V_ap_vld_assign_proc : process(i5_reg_432, ap_CS_fsm_state28)
    begin
        if (((i5_reg_432 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            res_2_V_ap_vld <= ap_const_logic_1;
        else 
            res_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_3_V <= p_Val2_5_reg_1253(25 downto 10);

    res_3_V_ap_vld_assign_proc : process(i5_reg_432, ap_CS_fsm_state28)
    begin
        if (((i5_reg_432 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            res_3_V_ap_vld <= ap_const_logic_1;
        else 
            res_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_4_V <= p_Val2_5_reg_1253(25 downto 10);

    res_4_V_ap_vld_assign_proc : process(i5_reg_432, ap_CS_fsm_state28)
    begin
        if (((i5_reg_432 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            res_4_V_ap_vld <= ap_const_logic_1;
        else 
            res_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_5_V <= p_Val2_5_reg_1253(25 downto 10);

    res_5_V_ap_vld_assign_proc : process(i5_reg_432, ap_CS_fsm_state28)
    begin
        if ((not((i5_reg_432 = ap_const_lv3_0)) and not((i5_reg_432 = ap_const_lv3_1)) and not((i5_reg_432 = ap_const_lv3_2)) and not((i5_reg_432 = ap_const_lv3_3)) and not((i5_reg_432 = ap_const_lv3_4)) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            res_5_V_ap_vld <= ap_const_logic_1;
        else 
            res_5_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_assign_s_fu_635_p3 <= 
        p_Val2_3_mux_fu_619_p3 when (brmerge_fu_613_p2(0) = '1') else 
        p_Val2_3_fu_627_p3;
    tmp_10_fu_959_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i5_reg_432),64));
    tmp_11_fu_924_p3 <= 
        ap_const_lv10_1FF when (brmerge_i_i_i2_i_fu_910_p2(0) = '1') else 
        tmp_9_reg_1210;
    tmp_13_fu_902_p3 <= 
        ap_const_lv10_200 when (underflow_2_fu_886_p2(0) = '1') else 
        tmp_9_fu_892_p4;
    tmp_14_fu_549_p1 <= i_reg_399(1 - 1 downto 0);
    tmp_1_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_399),64));
    tmp_254_i_i_fu_880_p2 <= (newsignbit_5_fu_872_p3 xor ap_const_lv1_1);
    tmp_254_i_i_i_fu_764_p2 <= (newsignbit_3_fu_756_p3 xor ap_const_lv1_1);
        tmp_2_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_reg_410),17));

        tmp_3_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_max_V_fu_511_p3),17));

    tmp_4_fu_947_p2 <= "1" when (i5_reg_432 = ap_const_lv3_6) else "0";
    tmp_5_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_reg_421),64));
    tmp_6_fu_938_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_2_fu_931_p3),64));
    tmp_7_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_reg_1121),64));
    tmp_8_fu_643_p2 <= "1" when (i4_reg_421 = ap_const_lv3_6) else "0";
    tmp_9_fu_892_p4 <= p_Val2_20_fu_867_p2(17 downto 8);
    tmp_fu_523_p2 <= "1" when (i_reg_399 = ap_const_lv3_6) else "0";
    tmp_i1_i_fu_505_p2 <= "1" when (signed(agg_result_i_i_i_fu_498_p3) < signed(reg_456)) else "0";
    tmp_i_i1_fu_462_p2 <= "1" when (signed(data_0_V_q0) < signed(data_0_V_q1)) else "0";
    tmp_i_i2_fu_474_p2 <= "1" when (signed(data_2_V_q0) < signed(data_2_V_q1)) else "0";
        tmp_i_i3_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_18_reg_1182),19));

        tmp_i_i_42_fu_849_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_17_fu_840_p3),19));

    tmp_i_i_fu_468_p2 <= "1" when (signed(data_1_V_q0) < signed(data_1_V_q1)) else "0";
        tmp_i_i_i1_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_11_reg_1156),19));

        tmp_i_i_i_41_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_10_fu_724_p3),19));

    tmp_i_i_i_fu_492_p2 <= "1" when (signed(data_0_V_q0) < signed(data_1_V_q0)) else "0";
    tmp_s_fu_589_p2 <= (newsignbit_fu_581_p3 xor ap_const_lv1_1);
    underflow_1_fu_770_p2 <= (tmp_254_i_i_i_fu_764_p2 and isneg_1_fu_743_p3);
    underflow_2_fu_886_p2 <= (tmp_254_i_i_fu_880_p2 and isneg_2_fu_859_p3);
    underflow_fu_595_p2 <= (tmp_s_fu_589_p2 and isneg_fu_569_p3);
    x_max_V_fu_511_p3 <= 
        reg_456 when (tmp_i1_i_fu_505_p2(0) = '1') else 
        agg_result_i_i_i_fu_498_p3;
    y_V_2_fu_931_p3 <= 
        tmp_11_fu_924_p3 when (brmerge_i_i1_fu_919_p2(0) = '1') else 
        tmp_13_reg_1215;
end behav;
