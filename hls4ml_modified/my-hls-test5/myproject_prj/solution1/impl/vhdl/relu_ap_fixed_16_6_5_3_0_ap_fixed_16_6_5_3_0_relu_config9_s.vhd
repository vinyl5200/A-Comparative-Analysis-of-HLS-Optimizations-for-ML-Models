-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config9_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_0_V_ce0 : OUT STD_LOGIC;
    data_0_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_1_V_ce0 : OUT STD_LOGIC;
    data_1_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_2_V_ce0 : OUT STD_LOGIC;
    data_2_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_3_V_ce0 : OUT STD_LOGIC;
    data_3_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_4_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_4_V_ce0 : OUT STD_LOGIC;
    data_4_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_5_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_5_V_ce0 : OUT STD_LOGIC;
    data_5_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_6_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_6_V_ce0 : OUT STD_LOGIC;
    data_6_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_7_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_7_V_ce0 : OUT STD_LOGIC;
    data_7_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    res_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_0_V_ce0 : OUT STD_LOGIC;
    res_0_V_we0 : OUT STD_LOGIC;
    res_0_V_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    res_1_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_1_V_ce0 : OUT STD_LOGIC;
    res_1_V_we0 : OUT STD_LOGIC;
    res_1_V_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    res_2_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_2_V_ce0 : OUT STD_LOGIC;
    res_2_V_we0 : OUT STD_LOGIC;
    res_2_V_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    res_3_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_3_V_ce0 : OUT STD_LOGIC;
    res_3_V_we0 : OUT STD_LOGIC;
    res_3_V_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    res_4_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_4_V_ce0 : OUT STD_LOGIC;
    res_4_V_we0 : OUT STD_LOGIC;
    res_4_V_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    res_5_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_5_V_ce0 : OUT STD_LOGIC;
    res_5_V_we0 : OUT STD_LOGIC;
    res_5_V_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    res_6_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_6_V_ce0 : OUT STD_LOGIC;
    res_6_V_we0 : OUT STD_LOGIC;
    res_6_V_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    res_7_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_7_V_ce0 : OUT STD_LOGIC;
    res_7_V_we0 : OUT STD_LOGIC;
    res_7_V_d0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
end;


architecture behav of relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config9_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ii_1_fu_287_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ii_1_reg_371 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal arrayNo_reg_376 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_0_V_addr_reg_421 : STD_LOGIC_VECTOR (3 downto 0);
    signal res_1_V_addr_reg_426 : STD_LOGIC_VECTOR (3 downto 0);
    signal res_2_V_addr_reg_431 : STD_LOGIC_VECTOR (3 downto 0);
    signal res_3_V_addr_reg_436 : STD_LOGIC_VECTOR (3 downto 0);
    signal res_4_V_addr_reg_441 : STD_LOGIC_VECTOR (3 downto 0);
    signal res_5_V_addr_reg_446 : STD_LOGIC_VECTOR (3 downto 0);
    signal res_6_V_addr_reg_451 : STD_LOGIC_VECTOR (3 downto 0);
    signal res_7_V_addr_reg_456 : STD_LOGIC_VECTOR (3 downto 0);
    signal datareg_V_fu_330_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal datareg_V_reg_461 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_26_fu_352_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_26_reg_466 : STD_LOGIC_VECTOR (14 downto 0);
    signal datareg_V_1_fu_361_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal datareg_V_1_reg_471 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ii_reg_270 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal newIndex_fu_307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_303_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal datareg_V_fu_330_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component myproject_mux_832_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    myproject_mux_832_16_1_1_U655 : component myproject_mux_832_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 32,
        dout_WIDTH => 16)
    port map (
        din0 => data_0_V_q0,
        din1 => data_1_V_q0,
        din2 => data_2_V_q0,
        din3 => data_3_V_q0,
        din4 => data_4_V_q0,
        din5 => data_5_V_q0,
        din6 => data_6_V_q0,
        din7 => data_7_V_q0,
        din8 => datareg_V_fu_330_p9,
        dout => datareg_V_fu_330_p10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_281_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ii_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                ii_reg_270 <= ii_1_reg_371;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ii_reg_270 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_281_p2 = ap_const_lv1_0))) then
                arrayNo_reg_376 <= ii_reg_270(7 downto 4);
                res_0_V_addr_reg_421 <= newIndex_fu_307_p1(4 - 1 downto 0);
                res_1_V_addr_reg_426 <= newIndex_fu_307_p1(4 - 1 downto 0);
                res_2_V_addr_reg_431 <= newIndex_fu_307_p1(4 - 1 downto 0);
                res_3_V_addr_reg_436 <= newIndex_fu_307_p1(4 - 1 downto 0);
                res_4_V_addr_reg_441 <= newIndex_fu_307_p1(4 - 1 downto 0);
                res_5_V_addr_reg_446 <= newIndex_fu_307_p1(4 - 1 downto 0);
                res_6_V_addr_reg_451 <= newIndex_fu_307_p1(4 - 1 downto 0);
                res_7_V_addr_reg_456 <= newIndex_fu_307_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                datareg_V_1_reg_471 <= datareg_V_1_fu_361_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                datareg_V_reg_461 <= datareg_V_fu_330_p10;
                tmp_26_reg_466 <= tmp_26_fu_352_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ii_1_reg_371 <= ii_1_fu_287_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_281_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_281_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, tmp_fu_281_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_281_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_281_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_281_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data_0_V_address0 <= newIndex_fu_307_p1(4 - 1 downto 0);

    data_0_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_0_V_ce0 <= ap_const_logic_1;
        else 
            data_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_1_V_address0 <= newIndex_fu_307_p1(4 - 1 downto 0);

    data_1_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_1_V_ce0 <= ap_const_logic_1;
        else 
            data_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_2_V_address0 <= newIndex_fu_307_p1(4 - 1 downto 0);

    data_2_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_2_V_ce0 <= ap_const_logic_1;
        else 
            data_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_3_V_address0 <= newIndex_fu_307_p1(4 - 1 downto 0);

    data_3_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_3_V_ce0 <= ap_const_logic_1;
        else 
            data_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_4_V_address0 <= newIndex_fu_307_p1(4 - 1 downto 0);

    data_4_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_4_V_ce0 <= ap_const_logic_1;
        else 
            data_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_5_V_address0 <= newIndex_fu_307_p1(4 - 1 downto 0);

    data_5_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_5_V_ce0 <= ap_const_logic_1;
        else 
            data_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_6_V_address0 <= newIndex_fu_307_p1(4 - 1 downto 0);

    data_6_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_6_V_ce0 <= ap_const_logic_1;
        else 
            data_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_7_V_address0 <= newIndex_fu_307_p1(4 - 1 downto 0);

    data_7_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_7_V_ce0 <= ap_const_logic_1;
        else 
            data_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    datareg_V_1_fu_361_p3 <= 
        tmp_26_reg_466 when (tmp_s_fu_356_p2(0) = '1') else 
        ap_const_lv15_0;
    datareg_V_fu_330_p9 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayNo_reg_376),32));
    ii_1_fu_287_p2 <= std_logic_vector(unsigned(ii_reg_270) + unsigned(ap_const_lv8_1));
    newIndex_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_303_p1),64));
    res_0_V_address0 <= res_0_V_addr_reg_421;

    res_0_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            res_0_V_ce0 <= ap_const_logic_1;
        else 
            res_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_0_V_d0 <= datareg_V_1_reg_471;

    res_0_V_we0_assign_proc : process(arrayNo_reg_376, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (arrayNo_reg_376 = ap_const_lv4_0))) then 
            res_0_V_we0 <= ap_const_logic_1;
        else 
            res_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_1_V_address0 <= res_1_V_addr_reg_426;

    res_1_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            res_1_V_ce0 <= ap_const_logic_1;
        else 
            res_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_1_V_d0 <= datareg_V_1_reg_471;

    res_1_V_we0_assign_proc : process(arrayNo_reg_376, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (arrayNo_reg_376 = ap_const_lv4_1))) then 
            res_1_V_we0 <= ap_const_logic_1;
        else 
            res_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_2_V_address0 <= res_2_V_addr_reg_431;

    res_2_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            res_2_V_ce0 <= ap_const_logic_1;
        else 
            res_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_2_V_d0 <= datareg_V_1_reg_471;

    res_2_V_we0_assign_proc : process(arrayNo_reg_376, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (arrayNo_reg_376 = ap_const_lv4_2))) then 
            res_2_V_we0 <= ap_const_logic_1;
        else 
            res_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_3_V_address0 <= res_3_V_addr_reg_436;

    res_3_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            res_3_V_ce0 <= ap_const_logic_1;
        else 
            res_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_3_V_d0 <= datareg_V_1_reg_471;

    res_3_V_we0_assign_proc : process(arrayNo_reg_376, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (arrayNo_reg_376 = ap_const_lv4_3))) then 
            res_3_V_we0 <= ap_const_logic_1;
        else 
            res_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_4_V_address0 <= res_4_V_addr_reg_441;

    res_4_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            res_4_V_ce0 <= ap_const_logic_1;
        else 
            res_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_4_V_d0 <= datareg_V_1_reg_471;

    res_4_V_we0_assign_proc : process(arrayNo_reg_376, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (arrayNo_reg_376 = ap_const_lv4_4))) then 
            res_4_V_we0 <= ap_const_logic_1;
        else 
            res_4_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_5_V_address0 <= res_5_V_addr_reg_446;

    res_5_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            res_5_V_ce0 <= ap_const_logic_1;
        else 
            res_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_5_V_d0 <= datareg_V_1_reg_471;

    res_5_V_we0_assign_proc : process(arrayNo_reg_376, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (arrayNo_reg_376 = ap_const_lv4_5))) then 
            res_5_V_we0 <= ap_const_logic_1;
        else 
            res_5_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_6_V_address0 <= res_6_V_addr_reg_451;

    res_6_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            res_6_V_ce0 <= ap_const_logic_1;
        else 
            res_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_6_V_d0 <= datareg_V_1_reg_471;

    res_6_V_we0_assign_proc : process(arrayNo_reg_376, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (arrayNo_reg_376 = ap_const_lv4_6))) then 
            res_6_V_we0 <= ap_const_logic_1;
        else 
            res_6_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_7_V_address0 <= res_7_V_addr_reg_456;

    res_7_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            res_7_V_ce0 <= ap_const_logic_1;
        else 
            res_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_7_V_d0 <= datareg_V_1_reg_471;

    res_7_V_we0_assign_proc : process(arrayNo_reg_376, ap_CS_fsm_state5)
    begin
        if ((not((arrayNo_reg_376 = ap_const_lv4_0)) and not((arrayNo_reg_376 = ap_const_lv4_1)) and not((arrayNo_reg_376 = ap_const_lv4_2)) and not((arrayNo_reg_376 = ap_const_lv4_3)) and not((arrayNo_reg_376 = ap_const_lv4_4)) and not((arrayNo_reg_376 = ap_const_lv4_5)) and not((arrayNo_reg_376 = ap_const_lv4_6)) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            res_7_V_we0 <= ap_const_logic_1;
        else 
            res_7_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_25_fu_303_p1 <= ii_reg_270(4 - 1 downto 0);
    tmp_26_fu_352_p1 <= datareg_V_fu_330_p10(15 - 1 downto 0);
    tmp_fu_281_p2 <= "1" when (ii_reg_270 = ap_const_lv8_80) else "0";
    tmp_s_fu_356_p2 <= "1" when (signed(datareg_V_reg_461) > signed(ap_const_lv16_0)) else "0";
end behav;
