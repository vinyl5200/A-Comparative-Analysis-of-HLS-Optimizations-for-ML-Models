// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config11_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_0_V_address0,
        data_0_V_ce0,
        data_0_V_q0,
        data_0_V_address1,
        data_0_V_ce1,
        data_0_V_q1,
        data_1_V_address0,
        data_1_V_ce0,
        data_1_V_q0,
        data_1_V_address1,
        data_1_V_ce1,
        data_1_V_q1,
        data_2_V_address0,
        data_2_V_ce0,
        data_2_V_q0,
        data_2_V_address1,
        data_2_V_ce1,
        data_2_V_q1,
        res_0_V,
        res_0_V_ap_vld,
        res_1_V,
        res_1_V_ap_vld,
        res_2_V,
        res_2_V_ap_vld,
        res_3_V,
        res_3_V_ap_vld,
        res_4_V,
        res_4_V_ap_vld,
        res_5_V,
        res_5_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_state3 = 28'd4;
parameter    ap_ST_fsm_state4 = 28'd8;
parameter    ap_ST_fsm_state5 = 28'd16;
parameter    ap_ST_fsm_state6 = 28'd32;
parameter    ap_ST_fsm_state7 = 28'd64;
parameter    ap_ST_fsm_state8 = 28'd128;
parameter    ap_ST_fsm_state9 = 28'd256;
parameter    ap_ST_fsm_state10 = 28'd512;
parameter    ap_ST_fsm_state11 = 28'd1024;
parameter    ap_ST_fsm_state12 = 28'd2048;
parameter    ap_ST_fsm_state13 = 28'd4096;
parameter    ap_ST_fsm_state14 = 28'd8192;
parameter    ap_ST_fsm_state15 = 28'd16384;
parameter    ap_ST_fsm_state16 = 28'd32768;
parameter    ap_ST_fsm_state17 = 28'd65536;
parameter    ap_ST_fsm_state18 = 28'd131072;
parameter    ap_ST_fsm_state19 = 28'd262144;
parameter    ap_ST_fsm_state20 = 28'd524288;
parameter    ap_ST_fsm_state21 = 28'd1048576;
parameter    ap_ST_fsm_state22 = 28'd2097152;
parameter    ap_ST_fsm_state23 = 28'd4194304;
parameter    ap_ST_fsm_state24 = 28'd8388608;
parameter    ap_ST_fsm_state25 = 28'd16777216;
parameter    ap_ST_fsm_state26 = 28'd33554432;
parameter    ap_ST_fsm_state27 = 28'd67108864;
parameter    ap_ST_fsm_state28 = 28'd134217728;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [0:0] data_0_V_address0;
output   data_0_V_ce0;
input  [15:0] data_0_V_q0;
output  [0:0] data_0_V_address1;
output   data_0_V_ce1;
input  [15:0] data_0_V_q1;
output  [0:0] data_1_V_address0;
output   data_1_V_ce0;
input  [15:0] data_1_V_q0;
output  [0:0] data_1_V_address1;
output   data_1_V_ce1;
input  [15:0] data_1_V_q1;
output  [0:0] data_2_V_address0;
output   data_2_V_ce0;
input  [15:0] data_2_V_q0;
output  [0:0] data_2_V_address1;
output   data_2_V_ce1;
input  [15:0] data_2_V_q1;
output  [15:0] res_0_V;
output   res_0_V_ap_vld;
output  [15:0] res_1_V;
output   res_1_V_ap_vld;
output  [15:0] res_2_V;
output   res_2_V_ap_vld;
output  [15:0] res_3_V;
output   res_3_V_ap_vld;
output  [15:0] res_4_V;
output   res_4_V_ap_vld;
output  [15:0] res_5_V;
output   res_5_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] data_0_V_address0;
reg data_0_V_ce0;
reg[0:0] data_0_V_address1;
reg data_0_V_ce1;
reg[0:0] data_1_V_address0;
reg data_1_V_ce0;
reg[0:0] data_1_V_address1;
reg data_1_V_ce1;
reg[0:0] data_2_V_address0;
reg data_2_V_ce0;
reg[0:0] data_2_V_address1;
reg data_2_V_ce1;
reg res_0_V_ap_vld;
reg res_1_V_ap_vld;
reg res_2_V_ap_vld;
reg res_3_V_ap_vld;
reg res_4_V_ap_vld;
reg res_5_V_ap_vld;

(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] exp_table1_address0;
reg    exp_table1_ce0;
wire   [16:0] exp_table1_q0;
wire   [9:0] invert_table2_address0;
reg    invert_table2_ce0;
wire   [17:0] invert_table2_q0;
reg   [15:0] reg_444;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state8;
reg   [15:0] reg_450;
wire    ap_CS_fsm_state7;
reg   [15:0] reg_456;
wire    ap_CS_fsm_state9;
wire   [0:0] tmp_i_i1_fu_462_p2;
reg   [0:0] tmp_i_i1_reg_1017;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_i_i_fu_468_p2;
reg   [0:0] tmp_i_i_reg_1022;
wire   [0:0] tmp_i_i2_fu_474_p2;
reg   [0:0] tmp_i_i2_reg_1027;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_i_i_i_fu_492_p2;
reg   [0:0] tmp_i_i_i_reg_1047;
wire  signed [16:0] tmp_3_fu_519_p1;
reg  signed [16:0] tmp_3_reg_1052;
wire    ap_CS_fsm_state5;
wire   [2:0] i_3_fu_529_p2;
reg   [2:0] i_3_reg_1060;
wire    ap_CS_fsm_state6;
wire   [63:0] tmp_1_fu_535_p1;
reg   [63:0] tmp_1_reg_1065;
wire   [0:0] tmp_fu_523_p2;
wire   [15:0] this_assign_s_fu_635_p3;
reg   [15:0] this_assign_s_reg_1088;
wire    ap_CS_fsm_state10;
wire   [2:0] i_1_fu_649_p2;
reg   [2:0] i_1_reg_1096;
wire    ap_CS_fsm_state12;
wire   [63:0] tmp_5_fu_655_p1;
reg   [63:0] tmp_5_reg_1101;
wire   [0:0] tmp_8_fu_643_p2;
reg   [9:0] y_V_reg_1121;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
reg   [16:0] exp_table1_load_reg_1131;
wire    ap_CS_fsm_state15;
wire   [17:0] p_Val2_6_fu_682_p2;
reg   [17:0] p_Val2_6_reg_1136;
wire    ap_CS_fsm_state17;
reg   [0:0] newsignbit_1_reg_1141;
wire  signed [17:0] p_Val2_11_fu_696_p3;
reg  signed [17:0] p_Val2_11_reg_1156;
wire    ap_CS_fsm_state18;
wire   [17:0] p_Val2_9_fu_710_p2;
reg   [17:0] p_Val2_9_reg_1162;
reg   [0:0] newsignbit_2_reg_1167;
wire  signed [17:0] p_Val2_18_fu_810_p3;
reg  signed [17:0] p_Val2_18_reg_1182;
wire    ap_CS_fsm_state19;
wire   [17:0] p_Val2_16_fu_826_p2;
reg   [17:0] p_Val2_16_reg_1188;
reg   [0:0] newsignbit_4_reg_1193;
wire   [0:0] isneg_2_fu_859_p3;
reg   [0:0] isneg_2_reg_1198;
wire    ap_CS_fsm_state20;
wire   [0:0] newsignbit_5_fu_872_p3;
reg   [0:0] newsignbit_5_reg_1204;
wire   [9:0] tmp_9_fu_892_p4;
reg   [9:0] tmp_9_reg_1210;
wire   [9:0] tmp_13_fu_902_p3;
reg   [9:0] tmp_13_reg_1215;
wire    ap_CS_fsm_state21;
wire  signed [25:0] OP2_V_cast_fu_943_p1;
reg  signed [25:0] OP2_V_cast_reg_1225;
wire    ap_CS_fsm_state22;
wire   [2:0] i_2_fu_953_p2;
reg   [2:0] i_2_reg_1233;
wire    ap_CS_fsm_state23;
wire   [0:0] tmp_4_fu_947_p2;
wire   [16:0] exp_res_V_q1;
reg   [16:0] exp_res_V_load_6_reg_1243;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire  signed [25:0] grp_fu_982_p2;
reg  signed [25:0] p_Val2_5_reg_1253;
wire    ap_CS_fsm_state27;
reg   [2:0] d_xi_xmax_V_address0;
reg    d_xi_xmax_V_ce0;
reg    d_xi_xmax_V_we0;
wire   [15:0] d_xi_xmax_V_q0;
reg   [2:0] exp_res_V_address0;
reg    exp_res_V_ce0;
reg    exp_res_V_we0;
wire   [16:0] exp_res_V_q0;
reg   [2:0] exp_res_V_address1;
reg    exp_res_V_ce1;
reg   [2:0] i_reg_399;
wire    ap_CS_fsm_state11;
reg   [15:0] p_Val2_1_reg_410;
reg   [2:0] i4_reg_421;
wire    ap_CS_fsm_state16;
reg   [2:0] i5_reg_432;
wire    ap_CS_fsm_state28;
wire   [63:0] agg_result_i_i_fu_480_p1;
wire   [63:0] agg_result_i_i1_fu_484_p1;
wire   [63:0] agg_result_i_i2_fu_488_p1;
wire   [63:0] newIndex9_fu_553_p1;
wire   [63:0] tmp_7_fu_670_p1;
wire   [63:0] tmp_6_fu_938_p1;
wire   [63:0] tmp_10_fu_959_p1;
wire   [15:0] agg_result_i_i_i_fu_498_p3;
wire   [0:0] tmp_i1_i_fu_505_p2;
wire   [15:0] x_max_V_fu_511_p3;
wire   [0:0] tmp_14_fu_549_p1;
wire  signed [16:0] tmp_2_fu_560_p1;
wire   [16:0] p_Val2_2_fu_564_p2;
wire   [0:0] newsignbit_fu_581_p3;
wire   [0:0] isneg_fu_569_p3;
wire   [0:0] tmp_s_fu_589_p2;
wire   [0:0] p_Result_not_fu_607_p2;
wire   [0:0] brmerge_i_i_fu_601_p2;
wire   [15:0] p_Val2_24_fu_577_p1;
wire   [0:0] underflow_fu_595_p2;
wire   [0:0] brmerge_fu_613_p2;
wire   [15:0] p_Val2_3_mux_fu_619_p3;
wire   [15:0] p_Val2_3_fu_627_p3;
wire   [17:0] p_Val2_3_40_fu_674_p1;
wire   [17:0] p_Val2_4_fu_678_p1;
wire   [17:0] p_Val2_7_fu_702_p1;
wire   [17:0] p_Val2_8_fu_706_p1;
wire  signed [17:0] p_Val2_10_fu_724_p3;
wire  signed [18:0] tmp_i_i_i1_fu_730_p1;
wire  signed [18:0] tmp_i_i_i_41_fu_733_p1;
wire   [18:0] p_Val2_12_fu_737_p2;
wire   [17:0] p_Val2_13_fu_751_p2;
wire   [0:0] newsignbit_3_fu_756_p3;
wire   [0:0] isneg_1_fu_743_p3;
wire   [0:0] tmp_254_i_i_i_fu_764_p2;
wire   [0:0] p_Result_not_i_i_i_fu_782_p2;
wire   [0:0] brmerge_i_i_i_i_i_fu_776_p2;
wire   [0:0] underflow_1_fu_770_p2;
wire   [0:0] brmerge_i_i_i_fu_788_p2;
wire   [17:0] p_Val2_22_mux_i_i_i_fu_794_p3;
wire   [17:0] p_Val2_i_i_i_fu_802_p3;
wire   [17:0] p_Val2_15_fu_822_p1;
wire   [17:0] p_Val2_14_fu_818_p1;
wire  signed [17:0] p_Val2_17_fu_840_p3;
wire  signed [18:0] tmp_i_i3_fu_846_p1;
wire  signed [18:0] tmp_i_i_42_fu_849_p1;
wire   [18:0] p_Val2_19_fu_853_p2;
wire   [17:0] p_Val2_20_fu_867_p2;
wire   [0:0] tmp_254_i_i_fu_880_p2;
wire   [0:0] underflow_2_fu_886_p2;
wire   [0:0] p_Result_not_i_i_fu_914_p2;
wire   [0:0] brmerge_i_i_i2_i_fu_910_p2;
wire   [0:0] brmerge_i_i1_fu_919_p2;
wire   [9:0] tmp_11_fu_924_p3;
wire   [9:0] y_V_2_fu_931_p3;
wire  signed [17:0] grp_fu_982_p0;
wire   [16:0] grp_fu_982_p1;
wire   [1:0] arrayNo_cast_fu_539_p4;
reg   [27:0] ap_NS_fsm;
wire   [25:0] grp_fu_982_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'd1;
end

softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config11_s_exp_table1 #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table1_address0),
    .ce0(exp_table1_ce0),
    .q0(exp_table1_q0)
);

softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config11_s_invert_table2 #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table2_address0),
    .ce0(invert_table2_ce0),
    .q0(invert_table2_q0)
);

dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config10_s_acc_V #(
    .DataWidth( 16 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
d_xi_xmax_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(d_xi_xmax_V_address0),
    .ce0(d_xi_xmax_V_ce0),
    .we0(d_xi_xmax_V_we0),
    .d0(this_assign_s_reg_1088),
    .q0(d_xi_xmax_V_q0)
);

softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config11_s_exp_res_V #(
    .DataWidth( 17 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
exp_res_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_res_V_address0),
    .ce0(exp_res_V_ce0),
    .we0(exp_res_V_we0),
    .d0(exp_table1_load_reg_1131),
    .q0(exp_res_V_q0),
    .address1(exp_res_V_address1),
    .ce1(exp_res_V_ce1),
    .q1(exp_res_V_q1)
);

myproject_mul_mul_18s_17ns_26_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_18s_17ns_26_3_1_U690(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_982_p0),
    .din1(grp_fu_982_p1),
    .ce(1'b1),
    .dout(grp_fu_982_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_fu_523_p2 == 1'd1))) begin
        i4_reg_421 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        i4_reg_421 <= i_1_reg_1096;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        i5_reg_432 <= i_2_reg_1233;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        i5_reg_432 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_399 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        i_reg_399 <= i_3_reg_1060;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_Val2_1_reg_410 <= data_2_V_q1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_Val2_1_reg_410 <= data_1_V_q1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_1_reg_410 <= data_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        reg_444 <= data_0_V_q1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        reg_444 <= data_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        reg_450 <= data_1_V_q1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        reg_450 <= data_1_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        reg_456 <= data_2_V_q1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        reg_456 <= data_2_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        OP2_V_cast_reg_1225 <= OP2_V_cast_fu_943_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        exp_res_V_load_6_reg_1243 <= exp_res_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        exp_table1_load_reg_1131 <= exp_table1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_1_reg_1096 <= i_1_fu_649_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        i_2_reg_1233 <= i_2_fu_953_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_3_reg_1060 <= i_3_fu_529_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        isneg_2_reg_1198 <= p_Val2_19_fu_853_p2[32'd18];
        newsignbit_5_reg_1204 <= p_Val2_20_fu_867_p2[32'd17];
        tmp_13_reg_1215 <= tmp_13_fu_902_p3;
        tmp_9_reg_1210 <= {{p_Val2_20_fu_867_p2[17:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        newsignbit_1_reg_1141 <= p_Val2_6_fu_682_p2[32'd17];
        p_Val2_6_reg_1136 <= p_Val2_6_fu_682_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        newsignbit_2_reg_1167 <= p_Val2_9_fu_710_p2[32'd17];
        p_Val2_11_reg_1156 <= p_Val2_11_fu_696_p3;
        p_Val2_9_reg_1162 <= p_Val2_9_fu_710_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        newsignbit_4_reg_1193 <= p_Val2_16_fu_826_p2[32'd17];
        p_Val2_16_reg_1188 <= p_Val2_16_fu_826_p2;
        p_Val2_18_reg_1182 <= p_Val2_18_fu_810_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        p_Val2_5_reg_1253 <= grp_fu_982_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        this_assign_s_reg_1088 <= this_assign_s_fu_635_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_fu_523_p2 == 1'd0))) begin
        tmp_1_reg_1065[2 : 0] <= tmp_1_fu_535_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_3_reg_1052 <= tmp_3_fu_519_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (tmp_8_fu_643_p2 == 1'd0))) begin
        tmp_5_reg_1101[2 : 0] <= tmp_5_fu_655_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_i_i1_reg_1017 <= tmp_i_i1_fu_462_p2;
        tmp_i_i2_reg_1027 <= tmp_i_i2_fu_474_p2;
        tmp_i_i_reg_1022 <= tmp_i_i_fu_468_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_i_i_i_reg_1047 <= tmp_i_i_i_fu_492_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        y_V_reg_1121 <= {{d_xi_xmax_V_q0[15:6]}};
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_4_fu_947_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_4_fu_947_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        d_xi_xmax_V_address0 = tmp_5_fu_655_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        d_xi_xmax_V_address0 = tmp_1_reg_1065;
    end else begin
        d_xi_xmax_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12))) begin
        d_xi_xmax_V_ce0 = 1'b1;
    end else begin
        d_xi_xmax_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        d_xi_xmax_V_we0 = 1'b1;
    end else begin
        d_xi_xmax_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_0_V_address0 = agg_result_i_i_fu_480_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        data_0_V_address0 = 64'd0;
    end else begin
        data_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data_0_V_address1 = newIndex9_fu_553_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        data_0_V_address1 = 64'd1;
    end else begin
        data_0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        data_0_V_ce0 = 1'b1;
    end else begin
        data_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        data_0_V_ce1 = 1'b1;
    end else begin
        data_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_1_V_address0 = agg_result_i_i1_fu_484_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        data_1_V_address0 = 64'd0;
    end else begin
        data_1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data_1_V_address1 = newIndex9_fu_553_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        data_1_V_address1 = 64'd1;
    end else begin
        data_1_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        data_1_V_ce0 = 1'b1;
    end else begin
        data_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        data_1_V_ce1 = 1'b1;
    end else begin
        data_1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_2_V_address0 = agg_result_i_i2_fu_488_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        data_2_V_address0 = 64'd0;
    end else begin
        data_2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data_2_V_address1 = newIndex9_fu_553_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        data_2_V_address1 = 64'd1;
    end else begin
        data_2_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        data_2_V_ce0 = 1'b1;
    end else begin
        data_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        data_2_V_ce1 = 1'b1;
    end else begin
        data_2_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        exp_res_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        exp_res_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        exp_res_V_address0 = tmp_5_reg_1101;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        exp_res_V_address0 = 64'd0;
    end else begin
        exp_res_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        exp_res_V_address1 = tmp_10_fu_959_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        exp_res_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        exp_res_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        exp_res_V_address1 = 64'd1;
    end else begin
        exp_res_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state12))) begin
        exp_res_V_ce0 = 1'b1;
    end else begin
        exp_res_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state12))) begin
        exp_res_V_ce1 = 1'b1;
    end else begin
        exp_res_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        exp_res_V_we0 = 1'b1;
    end else begin
        exp_res_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        exp_table1_ce0 = 1'b1;
    end else begin
        exp_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        invert_table2_ce0 = 1'b1;
    end else begin
        invert_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((i5_reg_432 == 3'd0) & (1'b1 == ap_CS_fsm_state28))) begin
        res_0_V_ap_vld = 1'b1;
    end else begin
        res_0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i5_reg_432 == 3'd1) & (1'b1 == ap_CS_fsm_state28))) begin
        res_1_V_ap_vld = 1'b1;
    end else begin
        res_1_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i5_reg_432 == 3'd2) & (1'b1 == ap_CS_fsm_state28))) begin
        res_2_V_ap_vld = 1'b1;
    end else begin
        res_2_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i5_reg_432 == 3'd3) & (1'b1 == ap_CS_fsm_state28))) begin
        res_3_V_ap_vld = 1'b1;
    end else begin
        res_3_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i5_reg_432 == 3'd4) & (1'b1 == ap_CS_fsm_state28))) begin
        res_4_V_ap_vld = 1'b1;
    end else begin
        res_4_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~(i5_reg_432 == 3'd0) & ~(i5_reg_432 == 3'd1) & ~(i5_reg_432 == 3'd2) & ~(i5_reg_432 == 3'd3) & ~(i5_reg_432 == 3'd4) & (1'b1 == ap_CS_fsm_state28))) begin
        res_5_V_ap_vld = 1'b1;
    end else begin
        res_5_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (tmp_fu_523_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if ((~(arrayNo_cast_fu_539_p4 == 2'd0) & ~(arrayNo_cast_fu_539_p4 == 2'd1) & (1'b1 == ap_CS_fsm_state6) & (tmp_fu_523_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if (((arrayNo_cast_fu_539_p4 == 2'd0) & (1'b1 == ap_CS_fsm_state6) & (tmp_fu_523_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state12 : begin
            if (((tmp_8_fu_643_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((tmp_4_fu_947_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP2_V_cast_fu_943_p1 = $signed(invert_table2_q0);

assign agg_result_i_i1_fu_484_p1 = tmp_i_i_reg_1022;

assign agg_result_i_i2_fu_488_p1 = tmp_i_i2_reg_1027;

assign agg_result_i_i_fu_480_p1 = tmp_i_i1_reg_1017;

assign agg_result_i_i_i_fu_498_p3 = ((tmp_i_i_i_reg_1047[0:0] === 1'b1) ? reg_450 : reg_444);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign arrayNo_cast_fu_539_p4 = {{i_reg_399[2:1]}};

assign brmerge_fu_613_p2 = (p_Result_not_fu_607_p2 | newsignbit_fu_581_p3);

assign brmerge_i_i1_fu_919_p2 = (p_Result_not_i_i_fu_914_p2 | newsignbit_5_reg_1204);

assign brmerge_i_i_fu_601_p2 = (newsignbit_fu_581_p3 ^ isneg_fu_569_p3);

assign brmerge_i_i_i2_i_fu_910_p2 = (newsignbit_5_reg_1204 ^ isneg_2_reg_1198);

assign brmerge_i_i_i_fu_788_p2 = (p_Result_not_i_i_i_fu_782_p2 | newsignbit_3_fu_756_p3);

assign brmerge_i_i_i_i_i_fu_776_p2 = (newsignbit_3_fu_756_p3 ^ isneg_1_fu_743_p3);

assign exp_table1_address0 = tmp_7_fu_670_p1;

assign grp_fu_982_p0 = OP2_V_cast_reg_1225;

assign grp_fu_982_p1 = grp_fu_982_p10;

assign grp_fu_982_p10 = exp_res_V_load_6_reg_1243;

assign i_1_fu_649_p2 = (i4_reg_421 + 3'd1);

assign i_2_fu_953_p2 = (i5_reg_432 + 3'd1);

assign i_3_fu_529_p2 = (i_reg_399 + 3'd1);

assign invert_table2_address0 = tmp_6_fu_938_p1;

assign isneg_1_fu_743_p3 = p_Val2_12_fu_737_p2[32'd18];

assign isneg_2_fu_859_p3 = p_Val2_19_fu_853_p2[32'd18];

assign isneg_fu_569_p3 = p_Val2_2_fu_564_p2[32'd16];

assign newIndex9_fu_553_p1 = tmp_14_fu_549_p1;

assign newsignbit_3_fu_756_p3 = p_Val2_13_fu_751_p2[32'd17];

assign newsignbit_5_fu_872_p3 = p_Val2_20_fu_867_p2[32'd17];

assign newsignbit_fu_581_p3 = p_Val2_2_fu_564_p2[32'd15];

assign p_Result_not_fu_607_p2 = (isneg_fu_569_p3 ^ 1'd1);

assign p_Result_not_i_i_fu_914_p2 = (isneg_2_reg_1198 ^ 1'd1);

assign p_Result_not_i_i_i_fu_782_p2 = (isneg_1_fu_743_p3 ^ 1'd1);

assign p_Val2_10_fu_724_p3 = ((newsignbit_2_reg_1167[0:0] === 1'b1) ? 18'd131071 : p_Val2_9_reg_1162);

assign p_Val2_11_fu_696_p3 = ((newsignbit_1_reg_1141[0:0] === 1'b1) ? 18'd131071 : p_Val2_6_reg_1136);

assign p_Val2_12_fu_737_p2 = ($signed(tmp_i_i_i1_fu_730_p1) + $signed(tmp_i_i_i_41_fu_733_p1));

assign p_Val2_13_fu_751_p2 = ($signed(p_Val2_10_fu_724_p3) + $signed(p_Val2_11_reg_1156));

assign p_Val2_14_fu_818_p1 = exp_res_V_q1;

assign p_Val2_15_fu_822_p1 = exp_res_V_q0;

assign p_Val2_16_fu_826_p2 = (p_Val2_15_fu_822_p1 + p_Val2_14_fu_818_p1);

assign p_Val2_17_fu_840_p3 = ((newsignbit_4_reg_1193[0:0] === 1'b1) ? 18'd131071 : p_Val2_16_reg_1188);

assign p_Val2_18_fu_810_p3 = ((brmerge_i_i_i_fu_788_p2[0:0] === 1'b1) ? p_Val2_22_mux_i_i_i_fu_794_p3 : p_Val2_i_i_i_fu_802_p3);

assign p_Val2_19_fu_853_p2 = ($signed(tmp_i_i3_fu_846_p1) + $signed(tmp_i_i_42_fu_849_p1));

assign p_Val2_20_fu_867_p2 = ($signed(p_Val2_17_fu_840_p3) + $signed(p_Val2_18_reg_1182));

assign p_Val2_22_mux_i_i_i_fu_794_p3 = ((brmerge_i_i_i_i_i_fu_776_p2[0:0] === 1'b1) ? 18'd131071 : p_Val2_13_fu_751_p2);

assign p_Val2_24_fu_577_p1 = p_Val2_2_fu_564_p2[15:0];

assign p_Val2_2_fu_564_p2 = ($signed(tmp_2_fu_560_p1) - $signed(tmp_3_reg_1052));

assign p_Val2_3_40_fu_674_p1 = exp_res_V_q0;

assign p_Val2_3_fu_627_p3 = ((underflow_fu_595_p2[0:0] === 1'b1) ? 16'd32768 : p_Val2_24_fu_577_p1);

assign p_Val2_3_mux_fu_619_p3 = ((brmerge_i_i_fu_601_p2[0:0] === 1'b1) ? 16'd32767 : p_Val2_24_fu_577_p1);

assign p_Val2_4_fu_678_p1 = exp_res_V_q1;

assign p_Val2_6_fu_682_p2 = (p_Val2_3_40_fu_674_p1 + p_Val2_4_fu_678_p1);

assign p_Val2_7_fu_702_p1 = exp_res_V_q1;

assign p_Val2_8_fu_706_p1 = exp_res_V_q0;

assign p_Val2_9_fu_710_p2 = (p_Val2_7_fu_702_p1 + p_Val2_8_fu_706_p1);

assign p_Val2_i_i_i_fu_802_p3 = ((underflow_1_fu_770_p2[0:0] === 1'b1) ? 18'd131072 : p_Val2_13_fu_751_p2);

assign res_0_V = {{p_Val2_5_reg_1253[25:10]}};

assign res_1_V = {{p_Val2_5_reg_1253[25:10]}};

assign res_2_V = {{p_Val2_5_reg_1253[25:10]}};

assign res_3_V = {{p_Val2_5_reg_1253[25:10]}};

assign res_4_V = {{p_Val2_5_reg_1253[25:10]}};

assign res_5_V = {{p_Val2_5_reg_1253[25:10]}};

assign this_assign_s_fu_635_p3 = ((brmerge_fu_613_p2[0:0] === 1'b1) ? p_Val2_3_mux_fu_619_p3 : p_Val2_3_fu_627_p3);

assign tmp_10_fu_959_p1 = i5_reg_432;

assign tmp_11_fu_924_p3 = ((brmerge_i_i_i2_i_fu_910_p2[0:0] === 1'b1) ? 10'd511 : tmp_9_reg_1210);

assign tmp_13_fu_902_p3 = ((underflow_2_fu_886_p2[0:0] === 1'b1) ? 10'd512 : tmp_9_fu_892_p4);

assign tmp_14_fu_549_p1 = i_reg_399[0:0];

assign tmp_1_fu_535_p1 = i_reg_399;

assign tmp_254_i_i_fu_880_p2 = (newsignbit_5_fu_872_p3 ^ 1'd1);

assign tmp_254_i_i_i_fu_764_p2 = (newsignbit_3_fu_756_p3 ^ 1'd1);

assign tmp_2_fu_560_p1 = $signed(p_Val2_1_reg_410);

assign tmp_3_fu_519_p1 = $signed(x_max_V_fu_511_p3);

assign tmp_4_fu_947_p2 = ((i5_reg_432 == 3'd6) ? 1'b1 : 1'b0);

assign tmp_5_fu_655_p1 = i4_reg_421;

assign tmp_6_fu_938_p1 = y_V_2_fu_931_p3;

assign tmp_7_fu_670_p1 = y_V_reg_1121;

assign tmp_8_fu_643_p2 = ((i4_reg_421 == 3'd6) ? 1'b1 : 1'b0);

assign tmp_9_fu_892_p4 = {{p_Val2_20_fu_867_p2[17:8]}};

assign tmp_fu_523_p2 = ((i_reg_399 == 3'd6) ? 1'b1 : 1'b0);

assign tmp_i1_i_fu_505_p2 = (($signed(agg_result_i_i_i_fu_498_p3) < $signed(reg_456)) ? 1'b1 : 1'b0);

assign tmp_i_i1_fu_462_p2 = (($signed(data_0_V_q0) < $signed(data_0_V_q1)) ? 1'b1 : 1'b0);

assign tmp_i_i2_fu_474_p2 = (($signed(data_2_V_q0) < $signed(data_2_V_q1)) ? 1'b1 : 1'b0);

assign tmp_i_i3_fu_846_p1 = p_Val2_18_reg_1182;

assign tmp_i_i_42_fu_849_p1 = p_Val2_17_fu_840_p3;

assign tmp_i_i_fu_468_p2 = (($signed(data_1_V_q0) < $signed(data_1_V_q1)) ? 1'b1 : 1'b0);

assign tmp_i_i_i1_fu_730_p1 = p_Val2_11_reg_1156;

assign tmp_i_i_i_41_fu_733_p1 = p_Val2_10_fu_724_p3;

assign tmp_i_i_i_fu_492_p2 = (($signed(data_0_V_q0) < $signed(data_1_V_q0)) ? 1'b1 : 1'b0);

assign tmp_s_fu_589_p2 = (newsignbit_fu_581_p3 ^ 1'd1);

assign underflow_1_fu_770_p2 = (tmp_254_i_i_i_fu_764_p2 & isneg_1_fu_743_p3);

assign underflow_2_fu_886_p2 = (tmp_254_i_i_fu_880_p2 & isneg_2_fu_859_p3);

assign underflow_fu_595_p2 = (tmp_s_fu_589_p2 & isneg_fu_569_p3);

assign x_max_V_fu_511_p3 = ((tmp_i1_i_fu_505_p2[0:0] === 1'b1) ? reg_456 : agg_result_i_i_i_fu_498_p3);

assign y_V_2_fu_931_p3 = ((brmerge_i_i1_fu_919_p2[0:0] === 1'b1) ? tmp_11_fu_924_p3 : tmp_13_reg_1215);

always @ (posedge ap_clk) begin
    tmp_1_reg_1065[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    tmp_5_reg_1101[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config11_s
