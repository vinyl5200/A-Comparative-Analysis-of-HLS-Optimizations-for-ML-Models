// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config7_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_0_V_address0,
        data_0_V_ce0,
        data_0_V_q0,
        data_1_V_address0,
        data_1_V_ce0,
        data_1_V_q0,
        data_2_V_address0,
        data_2_V_ce0,
        data_2_V_q0,
        data_3_V_address0,
        data_3_V_ce0,
        data_3_V_q0,
        data_4_V_address0,
        data_4_V_ce0,
        data_4_V_q0,
        data_5_V_address0,
        data_5_V_ce0,
        data_5_V_q0,
        data_6_V_address0,
        data_6_V_ce0,
        data_6_V_q0,
        data_7_V_address0,
        data_7_V_ce0,
        data_7_V_q0,
        res_0_V_address0,
        res_0_V_ce0,
        res_0_V_we0,
        res_0_V_d0,
        res_1_V_address0,
        res_1_V_ce0,
        res_1_V_we0,
        res_1_V_d0,
        res_2_V_address0,
        res_2_V_ce0,
        res_2_V_we0,
        res_2_V_d0,
        res_3_V_address0,
        res_3_V_ce0,
        res_3_V_we0,
        res_3_V_d0,
        res_4_V_address0,
        res_4_V_ce0,
        res_4_V_we0,
        res_4_V_d0,
        res_5_V_address0,
        res_5_V_ce0,
        res_5_V_we0,
        res_5_V_d0,
        res_6_V_address0,
        res_6_V_ce0,
        res_6_V_we0,
        res_6_V_d0,
        res_7_V_address0,
        res_7_V_ce0,
        res_7_V_we0,
        res_7_V_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [3:0] data_0_V_address0;
output   data_0_V_ce0;
input  [15:0] data_0_V_q0;
output  [3:0] data_1_V_address0;
output   data_1_V_ce0;
input  [15:0] data_1_V_q0;
output  [3:0] data_2_V_address0;
output   data_2_V_ce0;
input  [15:0] data_2_V_q0;
output  [3:0] data_3_V_address0;
output   data_3_V_ce0;
input  [15:0] data_3_V_q0;
output  [3:0] data_4_V_address0;
output   data_4_V_ce0;
input  [15:0] data_4_V_q0;
output  [3:0] data_5_V_address0;
output   data_5_V_ce0;
input  [15:0] data_5_V_q0;
output  [3:0] data_6_V_address0;
output   data_6_V_ce0;
input  [15:0] data_6_V_q0;
output  [3:0] data_7_V_address0;
output   data_7_V_ce0;
input  [15:0] data_7_V_q0;
output  [3:0] res_0_V_address0;
output   res_0_V_ce0;
output   res_0_V_we0;
output  [14:0] res_0_V_d0;
output  [3:0] res_1_V_address0;
output   res_1_V_ce0;
output   res_1_V_we0;
output  [14:0] res_1_V_d0;
output  [3:0] res_2_V_address0;
output   res_2_V_ce0;
output   res_2_V_we0;
output  [14:0] res_2_V_d0;
output  [3:0] res_3_V_address0;
output   res_3_V_ce0;
output   res_3_V_we0;
output  [14:0] res_3_V_d0;
output  [3:0] res_4_V_address0;
output   res_4_V_ce0;
output   res_4_V_we0;
output  [14:0] res_4_V_d0;
output  [3:0] res_5_V_address0;
output   res_5_V_ce0;
output   res_5_V_we0;
output  [14:0] res_5_V_d0;
output  [3:0] res_6_V_address0;
output   res_6_V_ce0;
output   res_6_V_we0;
output  [14:0] res_6_V_d0;
output  [3:0] res_7_V_address0;
output   res_7_V_ce0;
output   res_7_V_we0;
output  [14:0] res_7_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_0_V_ce0;
reg data_1_V_ce0;
reg data_2_V_ce0;
reg data_3_V_ce0;
reg data_4_V_ce0;
reg data_5_V_ce0;
reg data_6_V_ce0;
reg data_7_V_ce0;
reg res_0_V_ce0;
reg res_0_V_we0;
reg res_1_V_ce0;
reg res_1_V_we0;
reg res_2_V_ce0;
reg res_2_V_we0;
reg res_3_V_ce0;
reg res_3_V_we0;
reg res_4_V_ce0;
reg res_4_V_we0;
reg res_5_V_ce0;
reg res_5_V_we0;
reg res_6_V_ce0;
reg res_6_V_we0;
reg res_7_V_ce0;
reg res_7_V_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] ii_2_fu_287_p2;
reg   [7:0] ii_2_reg_371;
wire    ap_CS_fsm_state2;
reg   [3:0] arrayNo_reg_376;
wire   [0:0] tmp_fu_281_p2;
reg   [3:0] res_0_V_addr_reg_421;
reg   [3:0] res_1_V_addr_reg_426;
reg   [3:0] res_2_V_addr_reg_431;
reg   [3:0] res_3_V_addr_reg_436;
reg   [3:0] res_4_V_addr_reg_441;
reg   [3:0] res_5_V_addr_reg_446;
reg   [3:0] res_6_V_addr_reg_451;
reg   [3:0] res_7_V_addr_reg_456;
wire   [15:0] datareg_V_fu_330_p10;
reg   [15:0] datareg_V_reg_461;
wire    ap_CS_fsm_state3;
wire   [14:0] tmp_28_fu_352_p1;
reg   [14:0] tmp_28_reg_466;
wire   [14:0] datareg_V_2_fu_361_p3;
reg   [14:0] datareg_V_2_reg_471;
wire    ap_CS_fsm_state4;
reg   [7:0] ii_reg_270;
reg    ap_block_state1;
wire    ap_CS_fsm_state5;
wire   [63:0] newIndex_fu_307_p1;
wire   [3:0] tmp_27_fu_303_p1;
wire   [31:0] datareg_V_fu_330_p9;
wire   [0:0] tmp_s_fu_356_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
end

myproject_mux_832_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 32 ),
    .dout_WIDTH( 16 ))
myproject_mux_832_16_1_1_U617(
    .din0(data_0_V_q0),
    .din1(data_1_V_q0),
    .din2(data_2_V_q0),
    .din3(data_3_V_q0),
    .din4(data_4_V_q0),
    .din5(data_5_V_q0),
    .din6(data_6_V_q0),
    .din7(data_7_V_q0),
    .din8(datareg_V_fu_330_p9),
    .dout(datareg_V_fu_330_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_281_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ii_reg_270 <= ii_2_reg_371;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ii_reg_270 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_281_p2 == 1'd0))) begin
        arrayNo_reg_376 <= {{ii_reg_270[7:4]}};
        res_0_V_addr_reg_421 <= newIndex_fu_307_p1;
        res_1_V_addr_reg_426 <= newIndex_fu_307_p1;
        res_2_V_addr_reg_431 <= newIndex_fu_307_p1;
        res_3_V_addr_reg_436 <= newIndex_fu_307_p1;
        res_4_V_addr_reg_441 <= newIndex_fu_307_p1;
        res_5_V_addr_reg_446 <= newIndex_fu_307_p1;
        res_6_V_addr_reg_451 <= newIndex_fu_307_p1;
        res_7_V_addr_reg_456 <= newIndex_fu_307_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        datareg_V_2_reg_471 <= datareg_V_2_fu_361_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        datareg_V_reg_461 <= datareg_V_fu_330_p10;
        tmp_28_reg_466 <= tmp_28_fu_352_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ii_2_reg_371 <= ii_2_fu_287_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_281_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_281_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_0_V_ce0 = 1'b1;
    end else begin
        data_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_1_V_ce0 = 1'b1;
    end else begin
        data_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_2_V_ce0 = 1'b1;
    end else begin
        data_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_3_V_ce0 = 1'b1;
    end else begin
        data_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_4_V_ce0 = 1'b1;
    end else begin
        data_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_5_V_ce0 = 1'b1;
    end else begin
        data_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_6_V_ce0 = 1'b1;
    end else begin
        data_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_7_V_ce0 = 1'b1;
    end else begin
        data_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_0_V_ce0 = 1'b1;
    end else begin
        res_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (arrayNo_reg_376 == 4'd0))) begin
        res_0_V_we0 = 1'b1;
    end else begin
        res_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_1_V_ce0 = 1'b1;
    end else begin
        res_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (arrayNo_reg_376 == 4'd1))) begin
        res_1_V_we0 = 1'b1;
    end else begin
        res_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_2_V_ce0 = 1'b1;
    end else begin
        res_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (arrayNo_reg_376 == 4'd2))) begin
        res_2_V_we0 = 1'b1;
    end else begin
        res_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_3_V_ce0 = 1'b1;
    end else begin
        res_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (arrayNo_reg_376 == 4'd3))) begin
        res_3_V_we0 = 1'b1;
    end else begin
        res_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_4_V_ce0 = 1'b1;
    end else begin
        res_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (arrayNo_reg_376 == 4'd4))) begin
        res_4_V_we0 = 1'b1;
    end else begin
        res_4_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_5_V_ce0 = 1'b1;
    end else begin
        res_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (arrayNo_reg_376 == 4'd5))) begin
        res_5_V_we0 = 1'b1;
    end else begin
        res_5_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_6_V_ce0 = 1'b1;
    end else begin
        res_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (arrayNo_reg_376 == 4'd6))) begin
        res_6_V_we0 = 1'b1;
    end else begin
        res_6_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_7_V_ce0 = 1'b1;
    end else begin
        res_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(arrayNo_reg_376 == 4'd0) & ~(arrayNo_reg_376 == 4'd1) & ~(arrayNo_reg_376 == 4'd2) & ~(arrayNo_reg_376 == 4'd3) & ~(arrayNo_reg_376 == 4'd4) & ~(arrayNo_reg_376 == 4'd5) & ~(arrayNo_reg_376 == 4'd6) & (1'b1 == ap_CS_fsm_state5))) begin
        res_7_V_we0 = 1'b1;
    end else begin
        res_7_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_281_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign data_0_V_address0 = newIndex_fu_307_p1;

assign data_1_V_address0 = newIndex_fu_307_p1;

assign data_2_V_address0 = newIndex_fu_307_p1;

assign data_3_V_address0 = newIndex_fu_307_p1;

assign data_4_V_address0 = newIndex_fu_307_p1;

assign data_5_V_address0 = newIndex_fu_307_p1;

assign data_6_V_address0 = newIndex_fu_307_p1;

assign data_7_V_address0 = newIndex_fu_307_p1;

assign datareg_V_2_fu_361_p3 = ((tmp_s_fu_356_p2[0:0] === 1'b1) ? tmp_28_reg_466 : 15'd0);

assign datareg_V_fu_330_p9 = arrayNo_reg_376;

assign ii_2_fu_287_p2 = (ii_reg_270 + 8'd1);

assign newIndex_fu_307_p1 = tmp_27_fu_303_p1;

assign res_0_V_address0 = res_0_V_addr_reg_421;

assign res_0_V_d0 = datareg_V_2_reg_471;

assign res_1_V_address0 = res_1_V_addr_reg_426;

assign res_1_V_d0 = datareg_V_2_reg_471;

assign res_2_V_address0 = res_2_V_addr_reg_431;

assign res_2_V_d0 = datareg_V_2_reg_471;

assign res_3_V_address0 = res_3_V_addr_reg_436;

assign res_3_V_d0 = datareg_V_2_reg_471;

assign res_4_V_address0 = res_4_V_addr_reg_441;

assign res_4_V_d0 = datareg_V_2_reg_471;

assign res_5_V_address0 = res_5_V_addr_reg_446;

assign res_5_V_d0 = datareg_V_2_reg_471;

assign res_6_V_address0 = res_6_V_addr_reg_451;

assign res_6_V_d0 = datareg_V_2_reg_471;

assign res_7_V_address0 = res_7_V_addr_reg_456;

assign res_7_V_d0 = datareg_V_2_reg_471;

assign tmp_27_fu_303_p1 = ii_reg_270[3:0];

assign tmp_28_fu_352_p1 = datareg_V_fu_330_p10[14:0];

assign tmp_fu_281_p2 = ((ii_reg_270 == 8'd128) ? 1'b1 : 1'b0);

assign tmp_s_fu_356_p2 = (($signed(datareg_V_reg_461) > $signed(16'd0)) ? 1'b1 : 1'b0);

endmodule //relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config7_s
